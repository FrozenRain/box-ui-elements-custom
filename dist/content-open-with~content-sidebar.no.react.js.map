{"version":3,"sources":["webpack:///./src/components/plain-button/index.js","webpack:///./src/components/tooltip/Tooltip.js","webpack:///./src/components/tooltip/Tooltip.scss","webpack:///./src/elements/common/Tooltip.js","webpack:///./src/icons/general/IconCaretDown.js"],"names":["BOTTOM_CENTER","BOTTOM_LEFT","BOTTOM_RIGHT","MIDDLE_LEFT","MIDDLE_RIGHT","TOP_CENTER","TOP_LEFT","TOP_RIGHT","CALLOUT_THEME","DEFAULT_THEME","ERROR_THEME","positions","attachment","targetAttachment","Tooltip","React","constructor","props","uniqueId","tetherRef","current","isShown","position","onDismiss","setState","wasClosedByUser","type","event","handler","children","fireChildEvent","key","isShownProp","isControlled","state","showTooltip","render","bodyElement","className","constrainToScrollParent","constrainToWindow","isDisabled","isTabbable","showCloseButton","text","theme","only","withCloseButton","tetherPosition","constraints","componentProps","push","to","tooltipID","onBlur","handleBlur","onFocus","handleFocus","onKeyDown","handleKeyDown","onMouseEnter","handleMouseEnter","onMouseLeave","handleMouseLeave","tabIndex","bodyEl","HTMLElement","document","body","classes","classNames","closeTooltip","rest","IconCaretDown","color","height","title","width"],"mappings":"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","file":"content-open-with~content-sidebar.no.react.js","sourcesContent":["// @flow\nexport { default } from './PlainButton';\n","// @flow\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport uniqueId from 'lodash/uniqueId';\nimport TetherComponent from 'react-tether';\n\nimport IconClose from '../../icons/general/IconClose';\nimport PlainButton from '../plain-button';\n\nimport './Tooltip.scss';\n\nconst BOTTOM_CENTER = 'bottom-center';\nconst BOTTOM_LEFT = 'bottom-left';\nconst BOTTOM_RIGHT = 'bottom-right';\nconst MIDDLE_LEFT = 'middle-left';\nconst MIDDLE_RIGHT = 'middle-right';\nconst TOP_CENTER = 'top-center';\nconst TOP_LEFT = 'top-left';\nconst TOP_RIGHT = 'top-right';\n\nconst CALLOUT_THEME = 'callout';\nconst DEFAULT_THEME = 'default';\nconst ERROR_THEME = 'error';\n\nconst positions = {\n    [BOTTOM_CENTER]: {\n        attachment: 'top center',\n        targetAttachment: 'bottom center',\n    },\n    [BOTTOM_LEFT]: {\n        attachment: 'top right',\n        targetAttachment: 'bottom right',\n    },\n    [BOTTOM_RIGHT]: {\n        attachment: 'top left',\n        targetAttachment: 'bottom left',\n    },\n    [MIDDLE_LEFT]: {\n        attachment: 'middle right',\n        targetAttachment: 'middle left',\n    },\n    [MIDDLE_RIGHT]: {\n        attachment: 'middle left',\n        targetAttachment: 'middle right',\n    },\n    [TOP_CENTER]: {\n        attachment: 'bottom center',\n        targetAttachment: 'top center',\n    },\n    [TOP_LEFT]: {\n        attachment: 'bottom right',\n        targetAttachment: 'top right',\n    },\n    [TOP_RIGHT]: {\n        attachment: 'bottom left',\n        targetAttachment: 'top left',\n    },\n};\n\nexport type Position =\n    | 'bottom-center'\n    | 'bottom-left'\n    | 'bottom-right'\n    | 'middle-left'\n    | 'middle-right'\n    | 'top-center'\n    | 'top-left'\n    | 'top-right';\n\ntype Props = {\n    bodyElement?: HTMLElement,\n    /** A React element to put the tooltip on */\n    children: React.Node,\n    /** A CSS class for the tooltip */\n    className?: string,\n    /** Whether to constrain the tooltip to the element's scroll parent. Defaults to `false` */\n    constrainToScrollParent: boolean,\n    /** Whether to constrain the tooltip to window. Defaults to `true` */\n    constrainToWindow: boolean,\n    /** Forces the tooltip to be disabled irrespecitve of it's shown state. Defaults to `false` */\n    isDisabled: boolean,\n    /** Forces the tooltip to be shown or hidden (useful for errors) */\n    isShown?: boolean,\n    /** Whether to add tabindex=0.  Defaults to `true` */\n    isTabbable?: boolean,\n    /** Function called if the user manually dismisses the tooltip - only applies if showCloseButton is true */\n    onDismiss?: () => void,\n    /** Where to position the tooltip relative to the wrapped component */\n    position: Position,\n    /** Shows an X button to close the tooltip. Useful when tooltips are force shown with the isShown prop. */\n    showCloseButton?: boolean,\n    /** Text to show in the tooltip */\n    text?: React.Node,\n    /** Tooltip theme */\n    theme: 'callout' | 'default' | 'error',\n};\n\ntype State = {\n    isShown: boolean,\n    wasClosedByUser: boolean,\n};\n\nclass Tooltip extends React.Component<Props, State> {\n    static defaultProps = {\n        constrainToScrollParent: false,\n        constrainToWindow: true,\n        isDisabled: false,\n        position: TOP_CENTER,\n        theme: DEFAULT_THEME,\n    };\n\n    constructor(props: Props) {\n        super(props);\n\n        this.state = { isShown: !!props.isShown, wasClosedByUser: false };\n    }\n\n    tooltipID = uniqueId('tooltip');\n\n    tetherRef = React.createRef<{ position: () => {} }>();\n\n    // Instance API: Forces the radar to be repositioned\n    position = () => {\n        if (this.tetherRef.current && this.isShown()) {\n            this.tetherRef.current.position();\n        }\n    };\n\n    closeTooltip = () => {\n        const { onDismiss } = this.props;\n        this.setState({ wasClosedByUser: true });\n        if (onDismiss) {\n            onDismiss();\n        }\n    };\n\n    fireChildEvent = (type: string, event: SyntheticEvent<>) => {\n        // $FlowFixMe\n        const handler = this.props.children.props[type];\n        if (handler) {\n            handler(event);\n        }\n    };\n\n    handleMouseEnter = (event: SyntheticEvent<>) => {\n        this.setState({ isShown: true });\n        this.fireChildEvent('onMouseEnter', event);\n    };\n\n    handleMouseLeave = (event: SyntheticEvent<>) => {\n        this.setState({ isShown: false });\n        this.fireChildEvent('onMouseLeave', event);\n    };\n\n    handleFocus = (event: SyntheticEvent<>) => {\n        this.setState({ isShown: true });\n        this.fireChildEvent('onFocus', event);\n    };\n\n    handleBlur = (event: SyntheticEvent<>) => {\n        this.setState({ isShown: false });\n        this.fireChildEvent('onBlur', event);\n    };\n\n    handleKeyDown = (event: SyntheticKeyboardEvent<>) => {\n        if (event.key === 'Escape') {\n            this.setState({ isShown: false });\n        }\n        this.fireChildEvent('onKeyDown', event);\n    };\n\n    isControlled = () => {\n        const { isShown: isShownProp } = this.props;\n        return typeof isShownProp !== 'undefined';\n    };\n\n    isShown = () => {\n        const { isShown: isShownProp } = this.props;\n        const isControlled = this.isControlled();\n\n        const isShown = isControlled ? isShownProp : this.state.isShown;\n\n        const showTooltip = isShown && !this.state.wasClosedByUser;\n\n        return showTooltip;\n    };\n\n    render() {\n        const {\n            bodyElement,\n            children,\n            className,\n            constrainToScrollParent,\n            constrainToWindow,\n            isDisabled,\n            isTabbable = true,\n            position,\n            showCloseButton,\n            text,\n            theme,\n        } = this.props;\n\n        // If the tooltip is disabled just render the children\n        if (isDisabled) {\n            return React.Children.only(children);\n        }\n\n        const isControlled = this.isControlled();\n        const showTooltip = this.isShown();\n\n        const withCloseButton = showCloseButton && isControlled;\n        const tetherPosition = positions[position];\n        const constraints = [];\n        const componentProps = {};\n\n        if (constrainToScrollParent) {\n            constraints.push({\n                to: 'scrollParent',\n                attachment: 'together',\n            });\n        }\n        if (constrainToWindow) {\n            constraints.push({\n                to: 'window',\n                attachment: 'together',\n            });\n        }\n\n        if (showTooltip) {\n            componentProps['aria-describedby'] = this.tooltipID;\n        }\n        if (!isControlled) {\n            componentProps.onBlur = this.handleBlur;\n            componentProps.onFocus = this.handleFocus;\n            componentProps.onKeyDown = this.handleKeyDown;\n            componentProps.onMouseEnter = this.handleMouseEnter;\n            componentProps.onMouseLeave = this.handleMouseLeave;\n\n            if (isTabbable) {\n                componentProps.tabIndex = '0';\n            }\n        }\n\n        const bodyEl = bodyElement instanceof HTMLElement ? bodyElement : document.body;\n\n        const classes = classNames('tooltip', className, {\n            'is-callout': theme === CALLOUT_THEME,\n            'is-error': theme === ERROR_THEME,\n            'with-close-button': withCloseButton,\n        });\n\n        return (\n            <TetherComponent\n                attachment={tetherPosition.attachment}\n                bodyElement={bodyEl}\n                classPrefix=\"tooltip\"\n                constraints={constraints}\n                enabled={showTooltip}\n                targetAttachment={tetherPosition.targetAttachment}\n                ref={this.tetherRef}\n            >\n                {React.cloneElement(React.Children.only(children), componentProps)}\n                {showTooltip && (\n                    <div className={classes} id={this.tooltipID} role=\"tooltip\">\n                        {text}\n                        {withCloseButton && (\n                            <PlainButton className=\"tooltip-close-button\" onClick={this.closeTooltip}>\n                                <IconClose />\n                            </PlainButton>\n                        )}\n                    </div>\n                )}\n            </TetherComponent>\n        );\n    }\n}\n\nexport default Tooltip;\n","// extracted by mini-css-extract-plugin","/**\n * @flow\n * @file Wrapper to conditionally add a tooltip\n * @author Box\n */\n\nimport * as React from 'react';\nimport TooltipCore from '../../components/tooltip/Tooltip';\n\nconst Tooltip = ({\n    children,\n    isDisabled,\n    text,\n    ...rest\n}: {\n    children: React.Node,\n    isDisabled?: boolean,\n    text?: ?string | React.Node,\n}) => {\n    if (isDisabled || !text) {\n        return children;\n    }\n\n    return (\n        <TooltipCore text={text} {...rest}>\n            {children}\n        </TooltipCore>\n    );\n};\n\nexport default Tooltip;\n","// @flow\nimport * as React from 'react';\n\nimport AccessibleSVG from '../accessible-svg';\n\ntype Props = {\n    className?: string,\n    color?: string,\n    height?: number,\n    /** A text-only string describing the icon if it's not purely decorative for accessibility */\n    title?: string | React.Element<any>,\n    width?: number,\n};\n\nconst IconCaretDown = ({ className = '', color = '#000', height = 6, title, width = 10 }: Props) => (\n    <AccessibleSVG\n        className={`icon-caret-down ${className}`}\n        height={height}\n        title={title}\n        viewBox=\"0 0 10 6\"\n        width={width}\n    >\n        <path className=\"fill-color\" d=\"M0 .5l5 5 5-5H0z\" fill={color} fillRule=\"evenodd\" />\n    </AccessibleSVG>\n);\n\nexport default IconCaretDown;\n"],"sourceRoot":""}