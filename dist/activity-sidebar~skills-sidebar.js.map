{"version":3,"sources":["webpack:///./src/components/pill-selector-dropdown/Pill.js","webpack:///./src/components/pill-selector-dropdown/PillSelector.js","webpack:///./src/components/pill-selector-dropdown/SuggestedPill.js","webpack:///./src/components/pill-selector-dropdown/SuggestedPillsRow.js","webpack:///./src/components/pill-selector-dropdown/SuggestedPillsRow.scss"],"names":["Pill","isDisabled","isSelected","isValid","onRemove","text","styles","classNames","onClick","noop","stopDefaultEvent","event","preventDefault","stopPropagation","PillSelector","React","isFocused","selectedIndex","selectedOptions","props","size","length","key","map","option","inputEl","focus","setState","inputValue","value","numPills","getNumSelected","state","KEYS","backspace","index","resetSelectedIndex","selectedOption","get","arrowLeft","Math","max","hiddenEl","arrowRight","uniqueId","render","allowInvalidPills","className","disabled","error","inputProps","onInput","onSuggestedPillAdd","placeholder","suggestedPillsData","suggestedPillsFilter","suggestedPillsTitle","validator","rest","suggestedPillsEnabled","hasError","classes","ariaAttrs","errorMessageID","handleBlur","handleClick","handleFocus","handleKeyDown","bind","displayText","hiddenRef","input","getPillsByKey","SuggestedPill","email","id","name","onAdd","addSuggestedPill","type","handleKeyPress","enter","SuggestedPillsRow","selectedPillsValues","title","filteredSuggestedPillData","filter","item","includes"],"mappings":"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","file":"activity-sidebar~skills-sidebar.js","sourcesContent":["// @flow\nimport React from 'react';\nimport noop from 'lodash/noop';\nimport classNames from 'classnames';\n\ntype Props = {\n    isDisabled?: boolean,\n    isSelected?: boolean,\n    isValid?: boolean,\n    onRemove: Function,\n    text: string,\n};\n\nconst Pill = ({ isDisabled = false, isSelected = false, isValid = true, onRemove, text }: Props) => {\n    const styles = classNames('pill', {\n        'is-selected': isSelected && !isDisabled,\n        'is-invalid': !isValid,\n        'is-disabled': isDisabled,\n    });\n    const onClick = isDisabled ? noop : onRemove;\n\n    return (\n        <span className={styles}>\n            <span className=\"pill-text\">{text}</span>\n            <span aria-hidden=\"true\" className=\"close-btn\" onClick={onClick}>\n                âœ•\n            </span>\n        </span>\n    );\n};\n\nexport default Pill;\n","// @flow\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport uniqueId from 'lodash/uniqueId';\n\nimport Tooltip from '../tooltip';\nimport { KEYS } from '../../constants';\n\nimport Pill from './Pill';\nimport SuggestedPillsRow from './SuggestedPillsRow';\nimport type { Option, OptionValue, SelectedOptions, SuggestedPillsFilter } from './flowTypes';\n\nfunction stopDefaultEvent(event) {\n    event.preventDefault();\n    event.stopPropagation();\n}\n\ntype Props = {\n    allowInvalidPills: boolean,\n    className?: string,\n    disabled?: boolean,\n    error?: React.Node,\n    inputProps: Object,\n    onInput: Function,\n    onRemove: Function,\n    onSuggestedPillAdd?: Function,\n    placeholder: string,\n    selectedOptions: SelectedOptions,\n    suggestedPillsData?: Array<Object>,\n    suggestedPillsFilter?: SuggestedPillsFilter,\n    suggestedPillsTitle?: string,\n    validator: (option: Option | OptionValue) => boolean,\n};\n\ntype State = {\n    isFocused: boolean,\n    selectedIndex: number,\n};\n\nclass PillSelector extends React.Component<Props, State> {\n    static defaultProps = {\n        allowInvalidPills: false,\n        disabled: false,\n        error: '',\n        inputProps: {},\n        placeholder: '',\n        selectedOptions: [],\n        validator: () => true,\n    };\n\n    state = {\n        isFocused: false,\n        selectedIndex: -1,\n    };\n\n    getNumSelected = (): number => {\n        const { selectedOptions } = this.props;\n\n        return typeof selectedOptions.size === 'number' ? selectedOptions.size : selectedOptions.length;\n    };\n\n    getPillsByKey = (key: string): Array<any> => {\n        const { selectedOptions } = this.props;\n\n        return selectedOptions.map(option => option[key]);\n    };\n\n    inputEl: HTMLInputElement;\n\n    handleClick = () => {\n        this.inputEl.focus();\n    };\n\n    handleFocus = () => {\n        this.setState({ isFocused: true });\n    };\n\n    handleBlur = () => {\n        this.setState({ isFocused: false });\n    };\n\n    hiddenEl: HTMLSpanElement;\n\n    handleKeyDown = (event: SyntheticKeyboardEvent<>) => {\n        const inputValue = this.inputEl.value;\n        const numPills = this.getNumSelected();\n        const { selectedIndex } = this.state;\n\n        switch (event.key) {\n            case KEYS.backspace: {\n                let index = -1;\n                if (selectedIndex >= 0) {\n                    // remove selected pill\n                    index = selectedIndex;\n                    this.resetSelectedIndex();\n                    this.inputEl.focus();\n                } else if (inputValue === '') {\n                    // remove last pill\n                    index = numPills - 1;\n                }\n                if (index >= 0) {\n                    const { onRemove, selectedOptions } = this.props;\n                    const selectedOption =\n                        // $FlowFixMe\n                        typeof selectedOptions.get === 'function' ? selectedOptions.get(index) : selectedOptions[index];\n                    onRemove(selectedOption, index);\n                    stopDefaultEvent(event);\n                }\n                break;\n            }\n            case KEYS.arrowLeft:\n                if (selectedIndex >= 0) {\n                    // select previous pill\n                    this.setState({\n                        selectedIndex: Math.max(selectedIndex - 1, 0),\n                    });\n                    stopDefaultEvent(event);\n                } else if (inputValue === '' && numPills > 0) {\n                    // select last pill\n                    this.hiddenEl.focus();\n                    this.setState({ selectedIndex: numPills - 1 });\n                    stopDefaultEvent(event);\n                }\n                break;\n            case KEYS.arrowRight: {\n                if (selectedIndex >= 0) {\n                    const index = selectedIndex + 1;\n                    if (index >= numPills) {\n                        // deselect last pill\n                        this.resetSelectedIndex();\n                        this.inputEl.focus();\n                    } else {\n                        // select next pill\n                        this.setState({ selectedIndex: index });\n                    }\n                    stopDefaultEvent(event);\n                }\n                break;\n            }\n            // no default\n        }\n    };\n\n    errorMessageID = uniqueId('errorMessage');\n\n    hiddenRef = (hiddenEl: ?HTMLSpanElement) => {\n        if (hiddenEl) {\n            this.hiddenEl = hiddenEl;\n        }\n    };\n\n    resetSelectedIndex = () => {\n        if (this.state.selectedIndex !== -1) {\n            this.setState({ selectedIndex: -1 });\n        }\n    };\n\n    render() {\n        const { isFocused, selectedIndex } = this.state;\n        const {\n            allowInvalidPills,\n            className,\n            disabled,\n            error,\n            inputProps,\n            onInput,\n            onRemove,\n            onSuggestedPillAdd,\n            placeholder,\n            selectedOptions,\n            suggestedPillsData,\n            suggestedPillsFilter,\n            suggestedPillsTitle,\n            validator,\n            ...rest\n        } = this.props;\n        const suggestedPillsEnabled = suggestedPillsData && suggestedPillsData.length > 0;\n        const hasError = !!error;\n        const classes = classNames('pill-selector-input-wrapper', {\n            'is-disabled': disabled,\n            'is-focused': isFocused,\n            'show-error': hasError,\n            'pill-selector-suggestions-enabled': suggestedPillsEnabled,\n        });\n        const ariaAttrs = {\n            'aria-invalid': hasError,\n            'aria-errormessage': this.errorMessageID,\n        };\n\n        return (\n            <Tooltip isShown={hasError} text={error || ''} position=\"middle-right\" theme=\"error\">\n                {/* eslint-disable-next-line jsx-a11y/no-static-element-interactions */}\n                <span\n                    className={classes}\n                    onBlur={this.handleBlur}\n                    onClick={this.handleClick}\n                    onFocus={this.handleFocus}\n                    onKeyDown={this.handleKeyDown}\n                >\n                    {selectedOptions.map((option: Option, index: number) => (\n                        <Pill\n                            isValid={allowInvalidPills ? validator(option) : true}\n                            isDisabled={disabled}\n                            isSelected={index === selectedIndex}\n                            key={option.value}\n                            onRemove={onRemove.bind(this, option, index)}\n                            // $FlowFixMe option.text is for backwards compatibility\n                            text={option.displayText || option.text}\n                        />\n                    ))}\n                    {/* hidden element for focus/key events during pill selection */}\n                    <span\n                        aria-hidden=\"true\"\n                        className=\"accessibility-hidden\"\n                        onBlur={this.resetSelectedIndex}\n                        ref={this.hiddenRef}\n                        tabIndex={-1}\n                        data-testid=\"pill-selection-helper\"\n                    />\n                    <textarea\n                        {...ariaAttrs}\n                        {...rest}\n                        {...inputProps}\n                        autoComplete=\"off\"\n                        className={classNames('pill-selector-input', className)}\n                        disabled={disabled}\n                        onInput={onInput}\n                        placeholder={this.getNumSelected() === 0 ? placeholder : ''}\n                        ref={input => {\n                            this.inputEl = input;\n                        }}\n                    />\n                    <SuggestedPillsRow\n                        onSuggestedPillAdd={onSuggestedPillAdd}\n                        selectedPillsValues={this.getPillsByKey('value')}\n                        suggestedPillsFilter={suggestedPillsFilter}\n                        suggestedPillsData={suggestedPillsData}\n                        title={suggestedPillsTitle}\n                    />\n                    <span id={this.errorMessageID} className=\"accessibility-hidden\" role=\"alert\">\n                        {error}\n                    </span>\n                </span>\n            </Tooltip>\n        );\n    }\n}\n\nexport default PillSelector;\n","// @flow\nimport React from 'react';\n\nimport PlainButton from '../plain-button';\nimport Tooltip from '../tooltip';\nimport { KEYS } from '../../constants';\n\nimport { type SuggestedPill as SuggestedPillType } from './flowTypes';\n\nimport './SuggestedPillsRow.scss';\n\ntype Props = {\n    email: string,\n    id: number,\n    name: string,\n    onAdd: SuggestedPillType => void,\n};\n\nconst SuggestedPill = ({ email, id, name, onAdd }: Props) => {\n    const addSuggestedPill = (event: SyntheticEvent<HTMLButtonElement>) => {\n        event.preventDefault();\n\n        onAdd({\n            email,\n            id,\n            name,\n            text: name,\n            type: 'user',\n            value: email,\n        });\n    };\n\n    const handleKeyPress = (event: SyntheticKeyboardEvent<HTMLButtonElement>) => {\n        if (event.key === KEYS.enter) {\n            addSuggestedPill(event);\n        }\n    };\n\n    return (\n        <Tooltip position=\"bottom-center\" text={email}>\n            <PlainButton\n                className=\"suggested-pill-invisible-button\"\n                onClick={addSuggestedPill}\n                onKeyDown={handleKeyPress}\n                type=\"button\"\n            >\n                <span className=\"pill-text suggested-pill\">{name}</span>\n            </PlainButton>\n        </Tooltip>\n    );\n};\n\nexport default SuggestedPill;\n","// @flow\nimport React from 'react';\nimport noop from 'lodash/noop';\n\nimport SuggestedPill from './SuggestedPill';\nimport type { SuggestedPill as SuggestedPillType, SuggestedPills, SuggestedPillsFilter } from './flowTypes';\n\nimport './SuggestedPillsRow.scss';\n\ntype Props = {\n    onSuggestedPillAdd?: SuggestedPillType => void,\n    selectedPillsValues?: Array<number>,\n    suggestedPillsData?: SuggestedPills,\n    suggestedPillsFilter?: SuggestedPillsFilter,\n    title?: string,\n};\n\nconst SuggestedPillsRow = ({\n    onSuggestedPillAdd = noop,\n    selectedPillsValues = [],\n    suggestedPillsData = [],\n    suggestedPillsFilter = 'id',\n    title,\n}: Props) => {\n    // Prevents pills from being rendered that are in the form by checking for value (id or custom value)\n    const filteredSuggestedPillData = suggestedPillsData.filter(\n        item => !selectedPillsValues.includes(item[suggestedPillsFilter]),\n    );\n\n    if (filteredSuggestedPillData.length === 0) {\n        return null;\n    }\n\n    return (\n        <div className=\"pill-selector-suggested\">\n            <span>{title}</span>\n            {filteredSuggestedPillData.map(item => (\n                <SuggestedPill\n                    key={item.id}\n                    email={item.email}\n                    id={item.id}\n                    name={item.name}\n                    onAdd={onSuggestedPillAdd}\n                />\n            ))}\n        </div>\n    );\n};\n\nexport default SuggestedPillsRow;\n","// extracted by mini-css-extract-plugin"],"sourceRoot":""}