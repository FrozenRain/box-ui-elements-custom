{"version":3,"sources":["webpack:///./src/components/collapsible/Collapsible.js","webpack:///./src/components/collapsible/Collapsible.scss","webpack:///./src/components/text-input/TextInput.js","webpack:///./src/components/text-input/TextInput.scss","webpack:///./src/icons/general/IconAlertDefault.js"],"names":["Collapsible","React","constructor","props","onOpen","onClose","setState","prevState","isOpen","state","render","animationDuration","buttonProps","children","className","isBordered","hasStickyHeader","headerActionItems","title","sectionClassName","classNames","interactionTarget","RESIN_TAG_TARGET","modifiedButtonProps","omit","buttonClassName","toggleVisibility","bdlGray50","TextInput","description","error","errorPosition","hideLabel","hideOptionalLabel","inputRef","isLoading","isRequired","isValid","label","labelTooltip","rest","hasError","classes","errorMessageID","uniqueId","current","ariaAttrs","displayName","IconAlertDefault","color","height","width"],"mappings":"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","file":"details-sidebar~metadata-sidebar.js","sourcesContent":["// @flow\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport omit from 'lodash/omit';\nimport AnimateHeight from 'react-animate-height';\n\nimport { RESIN_TAG_TARGET } from '../../common/variables';\nimport IconCaretDown from '../../icons/general/IconCaretDown';\nimport PlainButton from '../plain-button';\nimport { bdlGray50 } from '../../styles/variables';\n\nimport './Collapsible.scss';\n\ntype Props = {\n    /** Duration of animation (milliseconds) */\n    animationDuration?: number,\n    /** Other props (e.g. resin target names) to be included in the button */\n    buttonProps?: Object,\n    /** Content to be displayed in the card if it's expanded */\n    children: React.Node,\n    /** CSS class for the wrapper div */\n    className?: string,\n    /** Determines look of component */\n    hasStickyHeader?: boolean,\n    /** Determines stickiness of the header */\n    headerActionItems?: React.Node,\n    /** Determines optional header action items */\n    isBordered?: boolean,\n    /** Initial state of the collapsible card */\n    isOpen: boolean,\n    /** callback called when collapsible is opened */\n    onClose?: Function,\n    /** callback called when collapsible is collapsed */\n    onOpen?: Function,\n    /** Title string or component */\n    title: string | React.Node,\n};\n\ntype State = {\n    isOpen: boolean,\n};\n\nclass Collapsible extends React.PureComponent<Props, State> {\n    static defaultProps = {\n        buttonProps: {},\n        className: '',\n        isOpen: true,\n        animationDuration: 100,\n    };\n\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            isOpen: props.isOpen,\n        };\n    }\n\n    toggleVisibility = () => {\n        const { onOpen, onClose } = this.props;\n        this.setState(\n            prevState => ({\n                isOpen: !prevState.isOpen,\n            }),\n            () => {\n                const { isOpen } = this.state;\n                if (isOpen && onOpen) {\n                    onOpen(this);\n                } else if (!isOpen && onClose) {\n                    onClose(this);\n                }\n            },\n        );\n    };\n\n    render() {\n        const { isOpen }: State = this.state;\n        const {\n            animationDuration,\n            buttonProps = {},\n            children,\n            className,\n            isBordered,\n            hasStickyHeader,\n            headerActionItems,\n            title,\n        }: Props = this.props;\n\n        const sectionClassName = classNames(\n            'collapsible-card',\n            {\n                'is-open': isOpen,\n            },\n            {\n                'is-bordered': isBordered,\n            },\n            className,\n        );\n        const interactionTarget = buttonProps[RESIN_TAG_TARGET];\n        const modifiedButtonProps = omit(buttonProps, [RESIN_TAG_TARGET]);\n        const buttonClassName = hasStickyHeader\n            ? 'collapsible-card-header has-sticky-header'\n            : 'collapsible-card-header';\n\n        if (interactionTarget) {\n            modifiedButtonProps[RESIN_TAG_TARGET] = `${interactionTarget}${isOpen ? 'collapse' : 'expand'}`;\n        }\n\n        return (\n            <div className={sectionClassName}>\n                <div className={buttonClassName}>\n                    <PlainButton\n                        {...modifiedButtonProps}\n                        className=\"collapsible-card-title\"\n                        onClick={this.toggleVisibility}\n                        type=\"button\"\n                    >\n                        {title}\n                        <IconCaretDown className=\"collapsible-card-header-caret\" color={bdlGray50} width={8} />\n                    </PlainButton>\n                    {isOpen && headerActionItems}\n                </div>\n                <AnimateHeight duration={animationDuration} height={isOpen ? 'auto' : 0}>\n                    <div className=\"collapsible-card-content\">{children}</div>\n                </AnimateHeight>\n            </div>\n        );\n    }\n}\n\nexport default Collapsible;\n","// extracted by mini-css-extract-plugin","// @flow\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport uniqueId from 'lodash/uniqueId';\n\nimport IconVerified from '../../icons/general/IconVerified';\n\nimport Label from '../label';\nimport LoadingIndicator from '../loading-indicator';\nimport Tooltip from '../tooltip';\nimport type { Position } from '../tooltip';\n\nimport './TextInput.scss';\n\ntype Props = {\n    /** Add a class to the component */\n    className?: string,\n    description?: React.Node,\n    error?: React.Node,\n    /** Renders error tooltip at the specified position (positions are those from Tooltip) */\n    errorPosition?: Position,\n    /** Hides the label */\n    hideLabel?: boolean,\n    /** Hides (optional) text from the label */\n    hideOptionalLabel?: boolean,\n    inputRef?: Function, // @TODO: eventually rename to innerRef for consistancy across all form elements\n    /** Renders a loading indicator within the component when true */\n    isLoading?: boolean,\n    /** Makes the input value required */\n    isRequired?: boolean,\n    /** Renders a green verified checkmark within the component when true */\n    isValid?: boolean,\n    /** Label displayed for the text input */\n    label: React.Node,\n    labelTooltip?: React.Node,\n};\n\nconst TextInput = ({\n    className = '',\n    description,\n    error,\n    errorPosition,\n    hideLabel,\n    hideOptionalLabel,\n    inputRef,\n    isLoading,\n    isRequired,\n    isValid,\n    label,\n    labelTooltip,\n    ...rest\n}: Props) => {\n    const hasError = !!error;\n    const classes = classNames(className, 'text-input-container', {\n        'show-error': hasError,\n    });\n\n    const errorMessageID = React.useRef(uniqueId('errorMessage')).current;\n    const ariaAttrs = {\n        'aria-invalid': hasError,\n        'aria-required': isRequired,\n        'aria-errormessage': errorMessageID,\n    };\n\n    return (\n        <div className={classes}>\n            <Label\n                hideLabel={hideLabel}\n                showOptionalText={!hideOptionalLabel && !isRequired}\n                text={label}\n                tooltip={labelTooltip}\n            >\n                {!!description && <i className=\"text-input-description\">{description}</i>}\n                <Tooltip isShown={hasError} position={errorPosition || 'middle-right'} text={error || ''} theme=\"error\">\n                    <input ref={inputRef} required={isRequired} {...ariaAttrs} {...rest} />\n                </Tooltip>\n                {isLoading && !isValid && <LoadingIndicator className=\"text-input-loading\" />}\n                {isValid && !isLoading && <IconVerified className=\"text-input-verified\" />}\n                <span id={errorMessageID} className=\"accessibility-hidden\" role=\"alert\">\n                    {error}\n                </span>\n            </Label>\n        </div>\n    );\n};\n\nTextInput.displayName = 'TextInput';\n\nexport type TextInputProps = Props;\nexport default TextInput;\n","// extracted by mini-css-extract-plugin","// @flow\nimport * as React from 'react';\n\nimport AccessibleSVG from '../accessible-svg';\n\ntype Props = {\n    className?: string,\n    color?: string,\n    height?: number,\n    /** A text-only string describing the icon if it's not purely decorative for accessibility */\n    title?: string | React.Element<any>,\n    width?: number,\n};\n\nconst IconAlertDefault = ({ className = '', color = '#F7931D', height = 26, title, width = 26 }: Props) => (\n    <AccessibleSVG\n        className={`icon-alert-default ${className}`}\n        title={title}\n        height={height}\n        width={width}\n        viewBox=\"0 0 26 26\"\n    >\n        <defs>\n            <circle id=\"b\" cx=\"8\" cy=\"8\" r=\"8\" />\n            <filter x=\"-46.9%\" y=\"-46.9%\" width=\"193.8%\" height=\"193.8%\" filterUnits=\"objectBoundingBox\" id=\"a\">\n                <feMorphology radius=\".5\" operator=\"dilate\" in=\"SourceAlpha\" result=\"shadowSpreadOuter1\" />\n                <feOffset in=\"shadowSpreadOuter1\" result=\"shadowOffsetOuter1\" />\n                <feGaussianBlur stdDeviation=\"2\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\" />\n                <feColorMatrix\n                    values=\"0 0 0 0 0.733285502 0 0 0 0 0.733285502 0 0 0 0 0.733285502 0 0 0 0.5 0\"\n                    in=\"shadowBlurOuter1\"\n                />\n            </filter>\n        </defs>\n        <g transform=\"translate(5 5)\" fill=\"none\" fillRule=\"evenodd\">\n            <use fill=\"#000\" filter=\"url(#a)\" xlinkHref=\"#b\" />\n            <use fill={color} xlinkHref=\"#b\" />\n            <path\n                d=\"M8.047 4.706v4.111\"\n                stroke=\"#FFF\"\n                strokeWidth=\"1.412\"\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n            />\n            <circle fill=\"#FFF\" cx=\"8.047\" cy=\"11.294\" r=\"1\" />\n        </g>\n    </AccessibleSVG>\n);\n\nexport default IconAlertDefault;\n"],"sourceRoot":""}