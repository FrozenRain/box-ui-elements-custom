{"version":3,"sources":["webpack:///./src/components/pill-cloud/PillCloud.js","webpack:///./src/elements/content-sidebar/SkillsSidebar.js","webpack:///./src/elements/content-sidebar/SkillsSidebar.scss","webpack:///./src/elements/content-sidebar/skills/SidebarSkills.js","webpack:///./src/elements/content-sidebar/skills/SidebarSkillsCard.js","webpack:///./src/elements/content-sidebar/skills/faces/Face.js","webpack:///./src/elements/content-sidebar/skills/faces/Face.scss","webpack:///./src/elements/content-sidebar/skills/faces/Faces.js","webpack:///./src/elements/content-sidebar/skills/faces/Faces.scss","webpack:///./src/elements/content-sidebar/skills/faces/index.js","webpack:///./src/elements/content-sidebar/skills/keywords/EditableKeywords.js","webpack:///./src/elements/content-sidebar/skills/keywords/EditableKeywords.scss","webpack:///./src/elements/content-sidebar/skills/keywords/Keywords.js","webpack:///./src/elements/content-sidebar/skills/keywords/Keywords.scss","webpack:///./src/elements/content-sidebar/skills/keywords/ReadOnlyKeywords.js","webpack:///./src/elements/content-sidebar/skills/keywords/ReadOnlyKeywords.scss","webpack:///./src/elements/content-sidebar/skills/keywords/index.js","webpack:///./src/elements/content-sidebar/skills/keywords/keywordUtils.js","webpack:///./src/elements/content-sidebar/skills/status/Status.js","webpack:///./src/elements/content-sidebar/skills/status/index.js","webpack:///./src/elements/content-sidebar/skills/timeline/Timeline.js","webpack:///./src/elements/content-sidebar/skills/timeline/Timeline.scss","webpack:///./src/elements/content-sidebar/skills/timeline/Timeslice.js","webpack:///./src/elements/content-sidebar/skills/timeline/Timeslice.scss","webpack:///./src/elements/content-sidebar/skills/timeline/index.js","webpack:///./src/elements/content-sidebar/skills/transcript/EditingTranscriptRow.js","webpack:///./src/elements/content-sidebar/skills/transcript/EditingTranscriptRow.scss","webpack:///./src/elements/content-sidebar/skills/transcript/ReadOnlyTranscriptRow.js","webpack:///./src/elements/content-sidebar/skills/transcript/Transcript.js","webpack:///./src/elements/content-sidebar/skills/transcript/Transcript.scss","webpack:///./src/elements/content-sidebar/skills/transcript/TranscriptRow.js","webpack:///./src/elements/content-sidebar/skills/transcript/TranscriptRow.scss","webpack:///./src/elements/content-sidebar/skills/transcript/index.js","webpack:///./src/elements/content-sidebar/skills/transcript/timeSliceUtils.js","webpack:///./src/icons/general/IconCollapse.js","webpack:///./src/icons/general/IconCopy.js","webpack:///./src/icons/general/IconEdit.js","webpack:///./src/icons/general/IconExpand.js","webpack:///./src/icons/general/IconMinus.js","webpack:///./src/icons/general/IconTrackNext.js","webpack:///./src/icons/general/IconTrackPrevious.js","webpack:///./src/utils/download.js"],"names":["PillCloud","options","onSelect","selectedOptions","buttonProps","map","option","value","classNames","find","op","isEqual","undefined","displayText","MARK_NAME_JS_READY","ORIGIN_SKILLS_SIDEBAR","EVENT_JS_READY","mark","SkillsSidebar","React","constructor","props","errors","cards","updatePreviewTranscript","setState","getPreview","getViewer","preview","viewer","transcriptCard","card","skill_card_type","SKILLS_TRANSCRIPT","addListener","loadedViewer","loadAutoGeneratedCaptions","index","updatedCards","state","clone","removes","adds","replaces","api","file","path","ops","canEdit","getProp","FIELD_PERMISSIONS_CAN_UPLOAD","Array","isArray","forEach","replaced","replacement","idx","entries","findIndex","entry","push","deletes","removed","sort","a","b","added","length","splice","getMetadataAPI","updateSkills","onSaveSuccessHandler","onSaveErrorHandler","logger","onReadyMetric","endMarkName","componentDidMount","getSkills","fetchSkillsSuccessCallback","noop","componentDidUpdate","refreshIdentity","prevRefreshIdentity","render","elementId","SIDEBAR_VIEW_SKILLS","messages","sidebarSkillsTitle","onSave","flow","withLogger","withErrorBoundary","withAPIContext","getCardInteractionTarget","SKILLS_KEYWORD","SKILLS_TARGETS","KEYWORDS","CARD","SKILLS_FACE","SKILLS_TIMELINE","FACES","TRANSCRIPTS","getCardTitle","skill_card_title","code","message","defaultKey","defaultMessage","defaultSkill","faceSkill","transcriptSkill","topicsSkill","statusSkill","error","SidebarSkills","onSkillChange","permissions","isSkillEditable","can_upload","status","SKILLS_STATUS","SKILLS_ERROR_UNKNOWN","id","cardId","uniqueId","isValid","isValidSkillsCard","interactionTarget","title","hasEntries","args","SidebarSkillsCard","hasError","isEditable","Face","face","selected","isEditing","onDelete","isAnyFaceSelected","isCurrentFaceSelected","isFaceSelected","faceClassName","FACE","text","image_url","COLOR_WHITE","DELETE","COLOR_999","Faces","prevState","slice","toggleIsEditing","isLoading","resetState","faces","duration","hasFaces","filter","includes","editClassName","editLabel","EDIT","sidebarSkillsErrorTitle","sidebarSkillsErrorContent","skillNoInfoFoundError","appears","TIMELINE","EDIT_CANCEL","onCancel","cancel","EDIT_SAVE","save","EditableKeywords","keywords","key","isInCompositionMode","onBlur","onAdd","keyword","type","event","currentTarget","pills","getPills","prevKeywords","onCompositionEnd","onCompositionStart","onInput","onKeyDown","onRemove","Keywords","PureComponent","transcript","locations","regex","RegExp","test","addedIndex","hasKeywords","concat","ReadOnlyselecteds","selectedIndex","pill","newIndex","pillCloudProps","INTERACTION_TARGET","SELECT","Status","localizedMessage","skillUnknownError","SKILLS_ERROR_INVALID_FILE_SIZE","skillInvalidFileSizeError","SKILLS_ERROR_INVALID_FILE_FORMAT","skillInvalidFileExtensionError","SKILLS_ERROR_EXTERNAL_AUTH","SKILLS_ERROR_BILLING","SKILLS_ERROR_INVOCATIONS","SKILLS_ERROR_FILE_PROCESSING","skillFileProcessingError","SKILLS_STATUS_PENDING","skillPendingStatus","SKILLS_STATUS_INVOKED","skillInvokedStatus","Timeline","timeslices","timeSliceIndex","playSegment","incr","Math","min","max","timeslice","validTime","isValidStartTime","play","start","end","PREVIOUS","previousSegment","NEXT","nextSegment","LENGTH_TEXT_ITEMLINE","MIN_WIDTH","Timeslice","onClick","barLength","startLeft","round","minEnding","ending","endLeft","width","left","EditingTranscriptRow","time","onChange","ReadOnlyTranscriptRow","Transcript","isEditingIndex","newTranscriptText","isCollapsed","accumulator","isValidTimeSlice","formatTime","isEditingRow","transcriptText","EDIT_TEXT","TRANSCRIPT","previewSegment","copiedClass","copy","reduce","transcriptReducer","copyBtn","classList","add","setTimeout","remove","btn","prevProps","wasEditing","timeSlice","hasManyEntries","editBtnClassName","contentClassName","expandCollapseMessage","expand","collapse","COPY","copyBtnRef","copyTranscript","bdlGray50","EXPAND","toggleExpandCollapse","transcriptEdit","transcriptMapper","TranscriptRow","IconCollapse","className","color","height","IconCopy","IconEdit","IconExpand","IconMinus","IconTrackNext","IconTrackPrevious","download","string","name","blob","Blob","window","navigator","msSaveBlob","url","URL","createObjectURL","document","createElement","style","display","href","body","appendChild","click","removeChild","revokeObjectURL","textarea","select","execCommand"],"mappings":"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","file":"skills-sidebar.js","sourcesContent":["// @flow\nimport React from 'react';\nimport classNames from 'classnames';\nimport isEqual from 'lodash/isEqual';\n\nimport Button from '../button';\nimport type { Option } from '../pill-selector-dropdown/flowTypes';\n\ntype Props = {\n    buttonProps?: Object,\n    onSelect?: Function,\n    options: Array<Option>,\n    selectedOptions?: Array<Option>,\n};\n\nconst PillCloud = ({ options, onSelect, selectedOptions = [], buttonProps = {} }: Props) => (\n    <div className=\"pill-cloud-container\">\n        {options &&\n            options.map(option => (\n                <Button\n                    key={option.value}\n                    className={classNames('pill', 'pill-cloud-button', {\n                        'is-selected': selectedOptions.find(op => isEqual(op, option)),\n                    })}\n                    onClick={onSelect ? () => onSelect(option) : undefined}\n                    {...buttonProps}\n                >\n                    {option.displayText}\n                </Button>\n            ))}\n    </div>\n);\n\nexport default PillCloud;\n","/**\n * @flow\n * @file Skills sidebar component\n * @author Box\n */\n\nimport * as React from 'react';\nimport flow from 'lodash/flow';\nimport getProp from 'lodash/get';\nimport noop from 'lodash/noop';\nimport { FormattedMessage } from 'react-intl';\nimport API from '../../api';\nimport LoadingIndicator from '../../components/loading-indicator/LoadingIndicator';\nimport messages from '../common/messages';\nimport SidebarContent from './SidebarContent';\nimport SidebarSkills from './skills/SidebarSkills';\nimport { EVENT_JS_READY } from '../common/logger/constants';\nimport { mark } from '../../utils/performance';\nimport { withAPIContext } from '../common/api-context';\nimport { withErrorBoundary } from '../common/error-boundary';\nimport { withLogger } from '../common/logger';\nimport {\n    FIELD_PERMISSIONS_CAN_UPLOAD,\n    SKILLS_TRANSCRIPT,\n    ORIGIN_SKILLS_SIDEBAR,\n    SIDEBAR_VIEW_SKILLS,\n} from '../../constants';\nimport './SkillsSidebar.scss';\n\ntype PropsWithoutContext = {\n    elementId: string,\n    file: BoxItem,\n    getPreview: Function,\n    getViewer: Function,\n    refreshIdentity?: boolean,\n};\n\ntype Props = {\n    api: API,\n} & PropsWithoutContext &\n    WithLoggerProps;\n\ntype State = {\n    cards?: Array<SkillCard>,\n    errors: NumberBooleanMap,\n};\n\nconst MARK_NAME_JS_READY = `${ORIGIN_SKILLS_SIDEBAR}_${EVENT_JS_READY}`;\n\nmark(MARK_NAME_JS_READY);\n\nclass SkillsSidebar extends React.PureComponent<Props, State> {\n    state: State = {\n        errors: {},\n    };\n\n    constructor(props: Props) {\n        super(props);\n        const { logger } = this.props;\n        logger.onReadyMetric({\n            endMarkName: MARK_NAME_JS_READY,\n        });\n    }\n\n    componentDidMount() {\n        const { api, file }: Props = this.props;\n        api.getMetadataAPI(false).getSkills(file, this.fetchSkillsSuccessCallback, noop);\n    }\n\n    componentDidUpdate({ refreshIdentity: prevRefreshIdentity }: Props) {\n        const { api, file, refreshIdentity }: Props = this.props;\n\n        if (refreshIdentity !== prevRefreshIdentity) {\n            api.getMetadataAPI(false).getSkills(file, this.fetchSkillsSuccessCallback, noop);\n        }\n    }\n\n    /**\n     * Handles skills fetch success\n     *\n     * @private\n     * @param {Array<SkillCard>} cards - Skills cards\n     * @return {void}\n     */\n    fetchSkillsSuccessCallback = (cards: Array<SkillCard>) => {\n        this.updatePreviewTranscript(cards);\n        this.setState({ cards });\n    };\n\n    /**\n     * Updates Preview with transcript data\n     *\n     * @private\n     * @param {Array<SkillCard>} cards - Skills cards\n     * @return {void}\n     */\n    updatePreviewTranscript = (cards: Array<SkillCard>): void => {\n        const { getPreview, getViewer } = this.props;\n        const preview = getPreview ? getPreview() : null;\n        const viewer = getViewer ? getViewer() : null;\n        const transcriptCard = cards.find(card => card.skill_card_type === SKILLS_TRANSCRIPT);\n        if (!transcriptCard || !preview) {\n            return;\n        }\n\n        if (!viewer) {\n            preview.addListener('load', ({ viewer: loadedViewer }) => {\n                if (typeof loadedViewer.loadAutoGeneratedCaptions === 'function') {\n                    loadedViewer.loadAutoGeneratedCaptions(transcriptCard);\n                }\n            });\n        } else if (typeof viewer.loadAutoGeneratedCaptions === 'function') {\n            viewer.loadAutoGeneratedCaptions(transcriptCard);\n        }\n    };\n\n    /**\n     * Success handler for save\n     *\n     * @private\n     * @param {Array} updatedCards - updated skill cards\n     * @param {number} index - index of the card being edited\n     * @return {void}\n     */\n    onSaveSuccessHandler = (index: number, updatedCards: Array<SkillCard>): void => {\n        const { errors }: State = this.state;\n        const clone = { ...errors };\n        delete clone[index];\n        this.updatePreviewTranscript(updatedCards);\n        this.setState({ cards: updatedCards, errors: clone });\n    };\n\n    /**\n     * Error handler for save\n     *\n     * @private\n     * @param {number} index - index of the card being edited\n     * @return {void}\n     */\n    onSaveErrorHandler = (index: number): void => {\n        const { errors }: State = this.state;\n        const clone = { ...errors };\n        clone[index] = true;\n        this.setState({ errors: clone });\n    };\n\n    /**\n     * Updates skill metadata\n     *\n     * @private\n     * @param {number} index - index of the card being edited\n     * @param {Array} removes - entries to remove\n     * @param {Array} adds - entries to add\n     * @param {Array} replaces - entries to replace\n     * @return {void}\n     */\n    onSave = (\n        index: number,\n        removes: Array<SkillCardEntry> = [],\n        adds: Array<SkillCardEntry> = [],\n        replaces: Array<{\n            replaced: SkillCardEntry,\n            replacement: SkillCardEntry,\n        }> = [],\n    ): void => {\n        const { api, file }: Props = this.props;\n        const { cards = [] }: State = this.state;\n        const card = cards[index];\n        const path = `/cards/${index}`;\n        const ops: JSONPatchOperations = [];\n        const canEdit = getProp(file, FIELD_PERMISSIONS_CAN_UPLOAD, false);\n\n        if (!canEdit || !card) {\n            return;\n        }\n\n        if (Array.isArray(replaces)) {\n            replaces.forEach(({ replaced, replacement }) => {\n                const idx = card.entries.findIndex(entry => entry === replaced);\n                if (idx > -1) {\n                    ops.push({\n                        op: 'replace',\n                        path: `${path}/entries/${idx}`,\n                        value: replacement,\n                    });\n                }\n            });\n        }\n\n        if (Array.isArray(removes)) {\n            const deletes = [];\n            removes.forEach(removed => {\n                const idx = card.entries.findIndex(entry => entry === removed);\n                if (idx > -1) {\n                    deletes.push(idx);\n                }\n            });\n            // To maintain metadata index positions, removes should be\n            // done is reverse order with largest index being removed first.\n            // Remove operations are atomic and don't happen in batch.\n            deletes\n                .sort((a, b) => b - a) // number sort in descending order\n                .forEach(idx => {\n                    ops.push({\n                        op: 'remove',\n                        path: `${path}/entries/${idx}`,\n                    });\n                });\n        }\n\n        if (Array.isArray(adds)) {\n            adds.forEach(added => {\n                ops.push({\n                    op: 'add',\n                    path: `${path}/entries/-`,\n                    value: added,\n                });\n            });\n        }\n\n        // If no ops, don't proceed\n        if (ops.length === 0) {\n            return;\n        }\n\n        // Add test ops before any other ops\n        ops.splice(0, 0, {\n            op: 'test',\n            path,\n            value: card,\n        });\n\n        api.getMetadataAPI(false).updateSkills(\n            file,\n            ops,\n            (updatedCards: Array<SkillCard>) => {\n                this.onSaveSuccessHandler(index, updatedCards);\n            },\n            () => {\n                this.onSaveErrorHandler(index);\n            },\n        );\n    };\n\n    render() {\n        const { file, getViewer, elementId }: Props = this.props;\n        const { cards, errors }: State = this.state;\n\n        return (\n            <SidebarContent\n                className=\"bcs-skills\"\n                elementId={elementId}\n                sidebarView={SIDEBAR_VIEW_SKILLS}\n                title={<FormattedMessage {...messages.sidebarSkillsTitle} />}\n            >\n                {cards ? (\n                    <SidebarSkills\n                        cards={cards}\n                        errors={errors}\n                        file={file}\n                        getViewer={getViewer}\n                        onSkillChange={this.onSave}\n                    />\n                ) : (\n                    <LoadingIndicator />\n                )}\n            </SidebarContent>\n        );\n    }\n}\n\nexport { SkillsSidebar as SkillsSidebarComponent };\nexport default flow([withLogger(ORIGIN_SKILLS_SIDEBAR), withErrorBoundary(ORIGIN_SKILLS_SIDEBAR), withAPIContext])(\n    SkillsSidebar,\n);\n","// extracted by mini-css-extract-plugin","/**\n * @flow\n * @file Details sidebar component\n * @author Box\n */\n\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport uniqueId from 'lodash/uniqueId';\nimport messages from '../../common/messages';\nimport { SKILLS_TARGETS } from '../../common/interactionTargets';\nimport SidebarSection from '../SidebarSection';\nimport { isValidSkillsCard } from './skillUtils';\nimport SidebarSkillsCard from './SidebarSkillsCard';\nimport {\n    SKILLS_TRANSCRIPT,\n    SKILLS_KEYWORD,\n    SKILLS_TIMELINE,\n    SKILLS_FACE,\n    SKILLS_STATUS,\n    SKILLS_ERROR_UNKNOWN,\n} from '../../../constants';\n\ntype Props = {\n    cards: Array<SkillCard>,\n    errors: NumberBooleanMap,\n    file: BoxItem,\n    getViewer: Function,\n    onSkillChange: Function,\n};\n\n/**\n * Get ths skill interaction target based on card type\n *\n * @param {Object} card - skill card\n * @return {string} - interaction target\n */\nconst getCardInteractionTarget = ({ skill_card_type }: SkillCard): string => {\n    switch (skill_card_type) {\n        case SKILLS_KEYWORD:\n            return SKILLS_TARGETS.KEYWORDS.CARD;\n        case SKILLS_FACE:\n        case SKILLS_TIMELINE:\n            return SKILLS_TARGETS.FACES.CARD;\n        case SKILLS_TRANSCRIPT:\n            return SKILLS_TARGETS.TRANSCRIPTS.CARD;\n        default:\n            return '';\n    }\n};\n\n/**\n * Get ths string skill title based on card title\n *\n * @param {Object} card - skill card\n * @return {string} - skill title\n */\nconst getCardTitle = ({ skill_card_type, skill_card_title = {} }: SkillCard): string | React.Node => {\n    const { code, message }: SkillCardLocalizableType = skill_card_title;\n    const defaultKey = `${skill_card_type}Skill`;\n    const defaultMessage = messages[defaultKey] || messages.defaultSkill;\n\n    switch (code) {\n        case 'skills_faces':\n            return <FormattedMessage {...messages.faceSkill} />;\n        case 'skills_transcript':\n            return <FormattedMessage {...messages.transcriptSkill} />;\n        case 'skills_topics':\n            return <FormattedMessage {...messages.topicsSkill} />;\n        case 'skills_status':\n            return <FormattedMessage {...messages.statusSkill} />;\n        case 'skills_error':\n            return <FormattedMessage {...messages.error} />;\n        default:\n            return message || <FormattedMessage {...defaultMessage} />;\n    }\n};\n\nconst SidebarSkills = ({ file, cards, errors, getViewer, onSkillChange }: Props): Array<React.Node> => {\n    const { permissions = {} }: BoxItem = file;\n    const isSkillEditable = !!permissions.can_upload;\n\n    return cards.map((card: SkillCard, index: number) => {\n        if (card.error && !card.status) {\n            card.skill_card_type = SKILLS_STATUS;\n            card.status = {\n                code: SKILLS_ERROR_UNKNOWN,\n            };\n            delete card.error;\n        }\n\n        const { id } = card;\n        const cardId = id || uniqueId('card_');\n        const isValid = isValidSkillsCard(file, card);\n        const interactionTarget = getCardInteractionTarget(card);\n        const title = getCardTitle(card);\n        const hasEntries = Array.isArray(card.entries) ? card.entries.length > 0 : isValid;\n\n        return isValid ? (\n            <SidebarSection key={cardId} interactionTarget={interactionTarget} isOpen={hasEntries} title={title}>\n                <SidebarSkillsCard\n                    card={card}\n                    cards={cards}\n                    getViewer={getViewer}\n                    hasError={!!errors[index]}\n                    isEditable={isSkillEditable}\n                    onSkillChange={(...args) => onSkillChange(index, ...args)}\n                />\n            </SidebarSection>\n        ) : null;\n    });\n};\n\nexport default SidebarSkills;\n","/**\n * @flow\n * @file Skills card component\n * @author Box\n */\n\nimport React from 'react';\nimport Status from './status';\nimport Transcript from './transcript';\nimport Keywords from './keywords';\nimport Faces from './faces';\nimport { SKILLS_TRANSCRIPT, SKILLS_KEYWORD, SKILLS_TIMELINE, SKILLS_FACE, SKILLS_STATUS } from '../../../constants';\n\ntype Props = {\n    card: SkillCard,\n    cards: Array<SkillCard>,\n    getViewer: Function,\n    hasError: boolean,\n    isEditable: boolean,\n    onSkillChange: Function,\n};\n\nconst SidebarSkillsCard = ({ card, cards, hasError, isEditable, onSkillChange, getViewer }: Props) => {\n    switch (card.skill_card_type) {\n        case SKILLS_KEYWORD:\n            return (\n                <Keywords\n                    card={card}\n                    getViewer={getViewer}\n                    hasError={hasError}\n                    isEditable={isEditable}\n                    onSkillChange={onSkillChange}\n                    transcript={\n                        isEditable\n                            ? cards.find(({ skill_card_type }) => skill_card_type === SKILLS_TRANSCRIPT)\n                            : undefined\n                    }\n                />\n            );\n        case SKILLS_TIMELINE:\n        case SKILLS_FACE:\n            return (\n                <Faces\n                    card={card}\n                    getViewer={getViewer}\n                    hasError={hasError}\n                    isEditable={isEditable}\n                    onSkillChange={onSkillChange}\n                />\n            );\n        case SKILLS_TRANSCRIPT:\n            return (\n                <Transcript\n                    card={card}\n                    getViewer={getViewer}\n                    hasError={hasError}\n                    isEditable={isEditable}\n                    onSkillChange={onSkillChange}\n                />\n            );\n        case SKILLS_STATUS:\n            return <Status card={card} />;\n        default:\n            return null;\n    }\n};\n\nexport default SidebarSkillsCard;\n","/**\n * @flow\n * @file File Keywords SkillCard component\n * @author Box\n */\n\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport PlainButton from '../../../../components/plain-button/PlainButton';\nimport IconClose from '../../../../icons/general/IconClose';\nimport IconMinus from '../../../../icons/general/IconMinus';\nimport { SKILLS_TARGETS } from '../../../common/interactionTargets';\nimport { COLOR_999, COLOR_WHITE } from '../../../../constants';\n\nimport './Face.scss';\n\ntype Props = {\n    face: SkillCardEntry,\n    isEditing: boolean,\n    onDelete: Function,\n    onSelect: Function,\n    selected?: SkillCardEntry,\n};\n\nconst Face = ({ face, selected, isEditing, onDelete, onSelect }: Props) => {\n    const isAnyFaceSelected = !!selected;\n    const isCurrentFaceSelected = face === selected;\n    const isFaceSelected = isAnyFaceSelected && isCurrentFaceSelected && !isEditing;\n    const faceClassName = classNames('be-face-wrapper', {\n        'be-face-unselected': !isEditing && isAnyFaceSelected && !isCurrentFaceSelected,\n    });\n\n    return (\n        <div className={faceClassName}>\n            <PlainButton\n                className=\"be-face\"\n                data-resin-target={SKILLS_TARGETS.FACES.FACE}\n                onClick={() => !isEditing && onSelect(face)}\n                type=\"button\"\n            >\n                <img alt={face.text} src={face.image_url} title={face.text} />\n                {isFaceSelected && <IconMinus color={COLOR_WHITE} />}\n            </PlainButton>\n            {isEditing && (\n                <PlainButton\n                    className=\"be-face-delete\"\n                    data-resin-target={SKILLS_TARGETS.FACES.DELETE}\n                    onClick={() => onDelete(face)}\n                    type=\"button\"\n                >\n                    <IconClose color={COLOR_999} height={16} width={16} />\n                </PlainButton>\n            )}\n        </div>\n    );\n};\n\nexport default Face;\n","// extracted by mini-css-extract-plugin","/**\n * @flow\n * @file Faces Skill Card component\n * @author Box\n */\n\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport classNames from 'classnames';\nimport PlainButton from '../../../../components/plain-button/PlainButton';\nimport PrimaryButton from '../../../../components/primary-button/PrimaryButton';\nimport LoadingIndicatorWrapper from '../../../../components/loading-indicator/LoadingIndicatorWrapper';\nimport InlineError from '../../../../components/inline-error/InlineError';\nimport Tooltip from '../../../../components/tooltip/Tooltip';\nimport Button from '../../../../components/button/Button';\nimport IconEdit from '../../../../icons/general/IconEdit';\nimport messages from '../../../common/messages';\nimport { SKILLS_TARGETS } from '../../../common/interactionTargets';\nimport Face from './Face';\nimport Timeline from '../timeline';\nimport './Faces.scss';\n\ntype Props = {\n    card: SkillCard,\n    getViewer?: Function,\n    hasError: boolean,\n    isEditable: boolean,\n    onSkillChange: Function,\n};\n\ntype State = {\n    faces: Array<SkillCardEntry>,\n    hasError: boolean,\n    isEditing: boolean,\n    isLoading: boolean,\n    removes: Array<SkillCardEntry>,\n    selected?: SkillCardEntry,\n};\n\nclass Faces extends React.PureComponent<Props, State> {\n    props: Props;\n\n    state: State;\n\n    /**\n     * [constructor]\n     *\n     * @public\n     * @return {Faces}\n     */\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            faces: props.card.entries,\n            removes: [],\n            isEditing: props.hasError,\n            hasError: props.hasError,\n            isLoading: false,\n        };\n    }\n\n    /**\n     * Helper to reset the state\n     *\n     * @private\n     * @param {Object} props - component props\n     * @return {void}\n     */\n    resetState(props: Props): void {\n        this.setState({\n            faces: props.card.entries,\n            removes: [],\n            isEditing: false,\n            selected: undefined,\n            hasError: false,\n            isLoading: false,\n        });\n    }\n\n    /**\n     * Toggles the edit mode\n     *\n     * @private\n     * @return {void}\n     */\n    toggleIsEditing = (): void => {\n        this.setState(prevState => ({\n            isEditing: !prevState.isEditing,\n        }));\n    };\n\n    /**\n     * Toggles face selection\n     *\n     * @private\n     * @return {void}\n     */\n    onSelect = (face: SkillCardEntry): void => {\n        const { selected } = this.state;\n        this.setState({\n            selected: selected === face ? undefined : face,\n        });\n    };\n\n    /**\n     * Deletes a face\n     *\n     * @private\n     * @return {void}\n     */\n    onDelete = (face: SkillCardEntry): void => {\n        const { removes } = this.state;\n        removes.push(face);\n        this.setState({ removes: removes.slice(0) });\n    };\n\n    /**\n     * Saves the new card data\n     *\n     * @private\n     * @return {void}\n     */\n    onSave = (): void => {\n        const { onSkillChange }: Props = this.props;\n        const { removes }: State = this.state;\n        this.toggleIsEditing();\n        if (removes.length > 0) {\n            this.setState({ isLoading: true });\n            onSkillChange(removes);\n        }\n    };\n\n    /**\n     * Cancels editing\n     *\n     * @private\n     * @return {void}\n     */\n    onCancel = (): void => {\n        this.resetState(this.props);\n    };\n\n    /**\n     * Renders the faces\n     *\n     * @private\n     * @return {void}\n     */\n    render() {\n        const { card, isEditable, getViewer }: Props = this.props;\n        const { selected, faces, removes, isEditing, hasError, isLoading }: State = this.state;\n        const { duration }: SkillCard = card;\n        const hasFaces = faces.length > 0;\n        const entries = faces.filter((face: SkillCardEntry) => !removes.includes(face));\n        const editClassName = classNames('be-face-edit', {\n            'be-faces-is-editing': isEditing,\n        });\n\n        return (\n            <LoadingIndicatorWrapper className=\"be-faces\" isLoading={isLoading}>\n                {hasFaces && isEditable && !isLoading && (\n                    <Tooltip text={<FormattedMessage {...messages.editLabel} />}>\n                        <PlainButton\n                            className={editClassName}\n                            data-resin-target={SKILLS_TARGETS.FACES.EDIT}\n                            onClick={this.toggleIsEditing}\n                            type=\"button\"\n                        >\n                            <IconEdit />\n                        </PlainButton>\n                    </Tooltip>\n                )}\n                {hasError && (\n                    <InlineError title={<FormattedMessage {...messages.sidebarSkillsErrorTitle} />}>\n                        <FormattedMessage {...messages.sidebarSkillsErrorContent} />\n                    </InlineError>\n                )}\n                {hasFaces ? (\n                    entries.map((face: SkillCardEntry, index: number) => (\n                        /* eslint-disable react/no-array-index-key */\n                        <Face\n                            key={index}\n                            face={face}\n                            isEditing={isEditing}\n                            onDelete={this.onDelete}\n                            onSelect={this.onSelect}\n                            selected={selected}\n                        />\n                        /* eslint-enable react/no-array-index-key */\n                    ))\n                ) : (\n                    <FormattedMessage {...messages.skillNoInfoFoundError} />\n                )}\n                {!!selected && !isEditing && Array.isArray(selected.appears) && selected.appears.length > 0 && (\n                    <Timeline\n                        duration={duration}\n                        getViewer={getViewer}\n                        interactionTarget={SKILLS_TARGETS.FACES.TIMELINE}\n                        timeslices={selected.appears}\n                    />\n                )}\n                {isEditing && (\n                    <div className=\"be-faces-buttons\">\n                        <Button\n                            data-resin-target={SKILLS_TARGETS.FACES.EDIT_CANCEL}\n                            onClick={this.onCancel}\n                            type=\"button\"\n                        >\n                            <FormattedMessage {...messages.cancel} />\n                        </Button>\n                        <PrimaryButton\n                            data-resin-target={SKILLS_TARGETS.FACES.EDIT_SAVE}\n                            onClick={this.onSave}\n                            type=\"button\"\n                        >\n                            <FormattedMessage {...messages.save} />\n                        </PrimaryButton>\n                    </div>\n                )}\n            </LoadingIndicatorWrapper>\n        );\n    }\n}\n\nexport default Faces;\n","// extracted by mini-css-extract-plugin","// @flow\nexport { default } from './Faces';\n","/**\n * @flow\n * @file Editable Skill Keywords card component\n * @author Box\n */\n\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport PillSelector from '../../../../components/pill-selector-dropdown/PillSelector';\nimport PrimaryButton from '../../../../components/primary-button/PrimaryButton';\nimport Button from '../../../../components/button/Button';\nimport messages from '../../../common/messages';\nimport { SKILLS_TARGETS } from '../../../common/interactionTargets';\nimport getPills from './keywordUtils';\nimport type { Pill, Pills } from './flowTypes';\nimport './EditableKeywords.scss';\n\ntype Props = {\n    keywords: Array<SkillCardEntry>,\n    onAdd: Function,\n    onCancel: Function,\n    onDelete: Function,\n    onSave: Function,\n};\n\ntype State = {\n    isInCompositionMode: boolean,\n    keyword: string,\n    pills: Pills,\n};\n\nclass EditableKeywords extends React.PureComponent<Props, State> {\n    props: Props;\n\n    state: State;\n\n    /**\n     * [constructor]\n     *\n     * @public\n     * @return {EditableKeywords}\n     */\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            pills: getPills(props.keywords),\n            keyword: '',\n            isInCompositionMode: false,\n        };\n    }\n\n    /**\n     * Called when keywords gets new properties.\n     * Should reset to original state.\n     *\n     * @private\n     * @param {Object} nextProps - component props\n     * @return {void}\n     */\n    componentDidUpdate({ keywords: prevKeywords }: Props): void {\n        const { keywords } = this.props;\n\n        if (prevKeywords !== keywords) {\n            this.setState({ pills: getPills(keywords), keyword: '' });\n        }\n    }\n\n    /**\n     * Called when keywords gets new properties.\n     * Should reset to original state.\n     *\n     * @private\n     * @param {Object} option - pill\n     * @param {number} index - pill index\n     * @return {void}\n     */\n    onRemove = (option: Pill, index: number): void => { // eslint-disable-line\n        const { onDelete, keywords }: Props = this.props;\n        onDelete(keywords[index]);\n    };\n\n    /**\n     * When pressing enter in the pill input box\n     *\n     * @private\n     * @param {Event} event - keyboard event\n     * @return {void}\n     */\n    onKeyDown = ({ key }: SyntheticKeyboardEvent<HTMLInputElement>): void => {\n        if (key === 'Enter' && !this.state.isInCompositionMode) {\n            this.onBlur();\n        }\n    };\n\n    /**\n     * Called when pill selector is blurred.\n     * Adds a new pill if needed.\n     *\n     * @private\n     * @return {void}\n     */\n    onBlur = () => {\n        const { onAdd }: Props = this.props;\n        const { keyword } = this.state;\n\n        if (keyword) {\n            onAdd({\n                type: 'text',\n                text: keyword,\n            });\n        }\n    };\n\n    /**\n     * Enables composition mode.\n     *\n     * @private\n     * @return {void}\n     */\n    onCompositionStart = () => {\n        this.setState({ isInCompositionMode: true });\n    };\n\n    /**\n     * Disables composition mode.\n     *\n     * @private\n     * @return {void}\n     */\n    onCompositionEnd = () => {\n        this.setState({ isInCompositionMode: false });\n    };\n\n    /**\n     * Called when pill selector gets new input value.\n     *\n     * @private\n     * @return {void}\n     */\n    onInput = (event: SyntheticKeyboardEvent<HTMLInputElement>) => {\n        const currentTarget = (event.currentTarget: HTMLInputElement);\n        this.setState({\n            keyword: currentTarget.value,\n        });\n    };\n\n    /**\n     * Renders the keywords\n     *\n     * @private\n     * @return {void}\n     */\n    render() {\n        const { onSave, onCancel }: Props = this.props;\n        const { pills, keyword }: State = this.state;\n        return (\n            <span className=\"pill-selector-wrapper\">\n                <PillSelector\n                    onBlur={this.onBlur}\n                    onCompositionEnd={this.onCompositionEnd}\n                    onCompositionStart={this.onCompositionStart}\n                    onInput={this.onInput}\n                    onKeyDown={this.onKeyDown}\n                    onPaste={this.onInput}\n                    onRemove={this.onRemove}\n                    selectedOptions={pills}\n                    value={keyword}\n                />\n                <div className=\"be-keywords-buttons\">\n                    <Button data-resin-target={SKILLS_TARGETS.KEYWORDS.EDIT_CANCEL} onClick={onCancel} type=\"button\">\n                        <FormattedMessage {...messages.cancel} />\n                    </Button>\n                    <PrimaryButton data-resin-target={SKILLS_TARGETS.KEYWORDS.EDIT_SAVE} onClick={onSave} type=\"button\">\n                        <FormattedMessage {...messages.save} />\n                    </PrimaryButton>\n                </div>\n            </span>\n        );\n    }\n}\n\nexport default EditableKeywords;\n","// extracted by mini-css-extract-plugin","/**\n * @flow\n * @file File Keywords SkillCard component\n * @author Box\n */\n\nimport React, { PureComponent } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport classNames from 'classnames';\nimport PlainButton from '../../../../components/plain-button/PlainButton';\nimport IconEdit from '../../../../icons/general/IconEdit';\nimport LoadingIndicatorWrapper from '../../../../components/loading-indicator/LoadingIndicatorWrapper';\nimport InlineError from '../../../../components/inline-error/InlineError';\nimport Tooltip from '../../../../components/tooltip/Tooltip';\nimport messages from '../../../common/messages';\nimport { SKILLS_TARGETS } from '../../../common/interactionTargets';\nimport EditableKeywords from './EditableKeywords';\nimport ReadOnlyKeywords from './ReadOnlyKeywords';\n\nimport './Keywords.scss';\n\ntype Props = {\n    card: SkillCard,\n    getViewer?: Function,\n    hasError: boolean,\n    isEditable: boolean,\n    onSkillChange: Function,\n    transcript?: SkillCard,\n};\n\ntype State = {\n    adds: Array<SkillCardEntry>,\n    hasError: boolean,\n    isEditing: boolean,\n    isLoading: boolean,\n    keywords: Array<SkillCardEntry>,\n    removes: Array<SkillCardEntry>,\n};\n\nclass Keywords extends PureComponent<Props, State> {\n    props: Props;\n\n    state: State;\n\n    /**\n     * [constructor]\n     *\n     * @public\n     * @return {Keywords}\n     */\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            keywords: props.card.entries,\n            adds: [],\n            removes: [],\n            isEditing: props.hasError,\n            hasError: props.hasError,\n            isLoading: false,\n        };\n    }\n\n    /**\n     * Helper to reset the state\n     *\n     * @private\n     * @param {Object} props - component props\n     * @return {void}\n     */\n    resetState(props: Props): void {\n        this.setState({\n            keywords: props.card.entries,\n            adds: [],\n            removes: [],\n            isEditing: false,\n            hasError: false,\n            isLoading: false,\n        });\n    }\n\n    /**\n     * Toggles the edit mode\n     *\n     * @private\n     * @return {void}\n     */\n    toggleIsEditing = (): void => {\n        this.setState(prevState => ({\n            isEditing: !prevState.isEditing,\n        }));\n    };\n\n    /**\n     * Adds a new keyword.\n     * Iterates over the transcript to find locations\n     *\n     * @private\n     * @return {void}\n     */\n    onAdd = (keyword: SkillCardEntry): void => {\n        const { transcript }: Props = this.props;\n        const { adds } = this.state;\n        const locations = [];\n        const regex = new RegExp(`\\\\b${((keyword.text: any): string)}\\\\b`, 'i');\n\n        if (transcript && Array.isArray(transcript.entries)) {\n            transcript.entries.forEach(({ text, appears }: SkillCardEntry): void => {\n                if (text && regex.test(text) && Array.isArray(appears) && appears.length > 0) {\n                    locations.push(appears[0]);\n                }\n            });\n        }\n\n        keyword.appears = locations;\n        adds.push(keyword);\n        this.setState({ adds: adds.slice(0) });\n    };\n\n    /**\n     * Deletes a keyword\n     *\n     * @private\n     * @return {void}\n     */\n    onDelete = (keyword: SkillCardEntry): void => {\n        const { adds, removes } = this.state;\n        const addedIndex = adds.findIndex(added => added === keyword);\n        if (addedIndex > -1) {\n            adds.splice(addedIndex, 1);\n            this.setState({ adds: adds.slice(0) });\n        } else {\n            removes.push(keyword);\n            this.setState({ removes: removes.slice(0) });\n        }\n    };\n\n    /**\n     * Saves the new card data\n     *\n     * @private\n     * @return {void}\n     */\n    onSave = (): void => {\n        const { onSkillChange }: Props = this.props;\n        const { removes, adds }: State = this.state;\n        this.toggleIsEditing();\n        if (removes.length > 0 || adds.length > 0) {\n            this.setState({ isLoading: true });\n            onSkillChange(removes, adds);\n        }\n    };\n\n    /**\n     * Cancels editing\n     *\n     * @private\n     * @return {void}\n     */\n    onCancel = (): void => {\n        this.resetState(this.props);\n    };\n\n    /**\n     * Renders the keywords\n     *\n     * @private\n     * @return {void}\n     */\n    render() {\n        const { card, getViewer, isEditable }: Props = this.props;\n        const { duration }: SkillCard = card;\n        const { isEditing, isLoading, hasError, keywords, removes, adds }: State = this.state;\n        const hasKeywords = keywords.length > 0;\n        const entries = keywords.filter((face: SkillCardEntry) => !removes.includes(face)).concat(adds);\n        const editClassName = classNames('be-keyword-edit', {\n            'be-keyword-is-editing': isEditing,\n        });\n\n        return (\n            <LoadingIndicatorWrapper className=\"be-keywords\" isLoading={isLoading}>\n                {hasKeywords && isEditable && !isLoading && (\n                    <Tooltip text={<FormattedMessage {...messages.editLabel} />}>\n                        <PlainButton\n                            className={editClassName}\n                            data-resin-target={SKILLS_TARGETS.KEYWORDS.EDIT}\n                            onClick={this.toggleIsEditing}\n                            type=\"button\"\n                        >\n                            <IconEdit />\n                        </PlainButton>\n                    </Tooltip>\n                )}\n                {hasError && (\n                    <InlineError title={<FormattedMessage {...messages.sidebarSkillsErrorTitle} />}>\n                        <FormattedMessage {...messages.sidebarSkillsErrorContent} />\n                    </InlineError>\n                )}\n                {isEditing && (\n                    <EditableKeywords\n                        keywords={entries}\n                        onAdd={this.onAdd}\n                        onCancel={this.onCancel}\n                        onDelete={this.onDelete}\n                        onSave={this.onSave}\n                    />\n                )}\n                {!isEditing && hasKeywords && (\n                    <ReadOnlyKeywords duration={duration} getViewer={getViewer} keywords={entries} />\n                )}\n                {!isEditing && !hasKeywords && <FormattedMessage {...messages.skillNoInfoFoundError} />}\n            </LoadingIndicatorWrapper>\n        );\n    }\n}\n\nexport default Keywords;\n","// extracted by mini-css-extract-plugin","/**\n * @flow\n * @file Read Only Keywords Card component\n * @author Box\n */\n\nimport * as React from 'react';\nimport PillCloud from '../../../../components/pill-cloud/PillCloud';\nimport { SKILLS_TARGETS, INTERACTION_TARGET } from '../../../common/interactionTargets';\nimport Timeline from '../timeline';\nimport getPills from './keywordUtils';\nimport type { Pill, Pills } from './flowTypes';\nimport './ReadOnlyKeywords.scss';\n\ntype Props = {\n    duration?: number,\n    getViewer?: Function,\n    keywords: Array<SkillCardEntry>,\n};\n\ntype State = {\n    selectedIndex: number,\n};\n\nclass ReadOnlyselecteds extends React.PureComponent<Props, State> {\n    props: Props;\n\n    state: State = {\n        selectedIndex: -1,\n    };\n\n    /**\n     * Shows the time line by selecting the keyword\n     *\n     * @private\n     * @param {Object} pill - keyword\n     * @return {void}\n     */\n    onSelect = (pill: Pill) => {\n        const { selectedIndex }: State = this.state;\n        const newIndex: number = ((pill.value: any): number);\n        this.setState({\n            selectedIndex: selectedIndex === newIndex ? -1 : newIndex,\n        });\n    };\n\n    /**\n     * Renders the keywords\n     *\n     * @private\n     * @return {void}\n     */\n    render() {\n        const { keywords, getViewer, duration }: Props = this.props;\n        const { selectedIndex }: State = this.state;\n        const options: Pills = getPills(keywords);\n        const selected = keywords[selectedIndex];\n        const pillCloudProps = selected ? { selectedOptions: [options[selectedIndex]] } : {};\n\n        return (\n            <>\n                <PillCloud\n                    onSelect={this.onSelect}\n                    options={options}\n                    {...pillCloudProps}\n                    buttonProps={{\n                        [INTERACTION_TARGET]: SKILLS_TARGETS.KEYWORDS.SELECT,\n                    }}\n                />\n                {!!selected && Array.isArray(selected.appears) && selected.appears.length > 0 && (\n                    <Timeline\n                        duration={duration}\n                        getViewer={getViewer}\n                        interactionTarget={SKILLS_TARGETS.KEYWORDS.TIMELINE}\n                        text={selected.text}\n                        timeslices={selected.appears}\n                    />\n                )}\n            </>\n        );\n    }\n}\n\nexport default ReadOnlyselecteds;\n","// extracted by mini-css-extract-plugin","// @flow\nexport { default } from './Keywords';\n","/**\n * @flow\n * @file Utilities for keywords skill\n * @author Box\n */\n\nimport type { Pill } from './flowTypes';\n\n/**\n * Converts skill card entries into pills\n *\n * @private\n * @param {Array<Object>} props - keyword entries\n * @return {Array<Object>} pills\n */\nconst getPills = (keywords: Array<SkillCardEntry> = []): Array<Pill> =>\n    keywords.map((keyword: SkillCardEntry, index: number): Pill => ({\n        displayText: ((keyword.text: any): string),\n        value: index,\n    }));\n\nexport default getPills;\n","/**\n * @flow\n * @file Status Skill Card component\n * @author Box\n */\n\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport messages from '../../../common/messages';\nimport {\n    SKILLS_ERROR_EXTERNAL_AUTH,\n    SKILLS_ERROR_BILLING,\n    SKILLS_ERROR_UNKNOWN,\n    SKILLS_ERROR_INVOCATIONS,\n    SKILLS_ERROR_FILE_PROCESSING,\n    SKILLS_ERROR_INVALID_FILE_SIZE,\n    SKILLS_ERROR_INVALID_FILE_FORMAT,\n    SKILLS_STATUS_PENDING,\n    SKILLS_STATUS_INVOKED,\n} from '../../../../constants';\n\ntype Props = {\n    card: SkillCard,\n};\n\nconst Status = ({ card }: Props) => {\n    const { status = {} }: SkillCard = card;\n    const { code, message }: SkillCardLocalizableType = status;\n    let localizedMessage = messages.skillUnknownError;\n\n    switch (code) {\n        case SKILLS_ERROR_INVALID_FILE_SIZE:\n            localizedMessage = messages.skillInvalidFileSizeError;\n            break;\n        case SKILLS_ERROR_INVALID_FILE_FORMAT:\n            localizedMessage = messages.skillInvalidFileExtensionError;\n            break;\n        case SKILLS_ERROR_EXTERNAL_AUTH:\n        case SKILLS_ERROR_BILLING:\n        case SKILLS_ERROR_INVOCATIONS:\n        case SKILLS_ERROR_UNKNOWN:\n            localizedMessage = messages.skillUnknownError;\n            break;\n        case SKILLS_ERROR_FILE_PROCESSING:\n            localizedMessage = messages.skillFileProcessingError;\n            break;\n        case SKILLS_STATUS_PENDING:\n            localizedMessage = messages.skillPendingStatus;\n            break;\n        case SKILLS_STATUS_INVOKED:\n            localizedMessage = messages.skillInvokedStatus;\n            break;\n        default:\n            if (message) {\n                return message;\n            }\n    }\n\n    return <FormattedMessage {...localizedMessage} />;\n};\n\nexport default Status;\n","// @flow\nexport { default } from './Status';\n","/**\n * @flow\n * @file Timeline component\n * @author Box\n */\n\nimport React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport PlainButton from '../../../../components/plain-button/PlainButton';\nimport IconTrackNext from '../../../../icons/general/IconTrackNext';\nimport IconTrackPrevious from '../../../../icons/general/IconTrackPrevious';\nimport messages from '../../../common/messages';\nimport { SKILLS_TARGETS } from '../../../common/interactionTargets';\nimport Timeslice from './Timeslice';\nimport { isValidStartTime } from '../transcript/timeSliceUtils';\n\nimport './Timeline.scss';\n\ntype Props = {\n    duration?: number,\n    getViewer?: Function,\n    interactionTarget: string,\n    text?: string,\n    timeslices?: SkillCardEntryTimeSlice[],\n    type?: SkillCardEntryType,\n    url?: string,\n};\n\nconst Timeline = ({ text = '', duration = 0, timeslices = [], getViewer, interactionTarget }: Props) => {\n    let timeSliceIndex = -1;\n\n    const playSegment = (index: number, incr: number = 0) => {\n        const newIndex = incr > 0 ? Math.min(timeslices.length - 1, index + incr) : Math.max(0, index + incr);\n        const viewer = getViewer ? getViewer() : null;\n        const timeslice = timeslices[newIndex];\n        const validTime = isValidStartTime(timeslice);\n\n        if (validTime && viewer && typeof viewer.play === 'function') {\n            viewer.play(timeslice.start);\n            timeSliceIndex = newIndex;\n        }\n    };\n\n    return (\n        <div className=\"be-timeline\">\n            {text && <div className=\"be-timeline-label\">{text}</div>}\n            <div className=\"be-timeline-line-wrapper\">\n                <div className=\"be-timeline-line\" />\n                {timeslices.map(\n                    ({ start, end }: SkillCardEntryTimeSlice, index) => (\n                        /* eslint-disable react/no-array-index-key */\n                        <Timeslice\n                            key={index}\n                            duration={duration}\n                            end={end}\n                            index={index}\n                            interactionTarget={interactionTarget}\n                            onClick={playSegment}\n                            start={start}\n                        />\n                    ),\n                    /* eslint-enable react/no-array-index-key */\n                )}\n            </div>\n            <div className=\"be-timeline-btns\">\n                <PlainButton\n                    data-resin-target={SKILLS_TARGETS.TIMELINE.PREVIOUS}\n                    onClick={() => playSegment(timeSliceIndex, -1)}\n                    type=\"button\"\n                >\n                    <IconTrackPrevious title={<FormattedMessage {...messages.previousSegment} />} />\n                </PlainButton>\n                <PlainButton\n                    data-resin-target={SKILLS_TARGETS.TIMELINE.NEXT}\n                    onClick={() => playSegment(timeSliceIndex, 1)}\n                    type=\"button\"\n                >\n                    <IconTrackNext title={<FormattedMessage {...messages.nextSegment} />} />\n                </PlainButton>\n            </div>\n        </div>\n    );\n};\n\nexport default Timeline;\n","// extracted by mini-css-extract-plugin","/**\n * @flow\n * @file Timeline line component\n * @author Box\n */\n\nimport React from 'react';\nimport PlainButton from '../../../../components/plain-button/PlainButton';\nimport './Timeslice.scss';\n\ntype Props = {\n    duration: number,\n    end?: number,\n    index: number,\n    interactionTarget: string,\n    onClick: Function,\n    start: number,\n};\n\nconst LENGTH_TEXT_ITEMLINE = 290; // match with css\nconst MIN_WIDTH = 6; // Need at least some width to be clickable\n\nconst Timeslice = ({ start, end, duration, onClick, index, interactionTarget }: Props) => {\n    if (typeof start !== 'number' || !duration || start >= duration) {\n        return null;\n    }\n\n    const barLength = LENGTH_TEXT_ITEMLINE;\n    let startLeft = Math.round((start * barLength) / duration);\n    const minEnding = startLeft + MIN_WIDTH; // Need at least some width to be clickable\n    const ending = typeof end === 'number' ? Math.max(minEnding, (end * barLength) / duration) : minEnding;\n    const endLeft = Math.round(Math.min(barLength, ending));\n    let width = endLeft - startLeft;\n\n    // If width is too small re-adjust the left position\n    // to get to at least 6px wide for clickability\n    if (width < MIN_WIDTH) {\n        startLeft -= MIN_WIDTH - width;\n        width = MIN_WIDTH;\n    }\n\n    return (\n        <PlainButton\n            className=\"be-timeline-time\"\n            data-resin-target={interactionTarget}\n            onClick={() => onClick(index)}\n            style={{\n                left: `${startLeft}px`,\n                width: `${width}px`,\n            }}\n            type=\"button\"\n        />\n    );\n};\n\nexport default Timeslice;\n","// extracted by mini-css-extract-plugin","// @flow\nexport { default } from './Timeline';\n","/**\n * @flow\n * @file Editable transcript row component\n * @author Box\n */\n\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport TextareaAutosize from 'react-textarea-autosize';\nimport PrimaryButton from '../../../../components/primary-button/PrimaryButton';\nimport Button from '../../../../components/button/Button';\nimport messages from '../../../common/messages';\nimport { SKILLS_TARGETS } from '../../../common/interactionTargets';\nimport './EditingTranscriptRow.scss';\n\ntype Props = {\n    onCancel: Function,\n    onChange: Function,\n    onSave: Function,\n    text?: string,\n    time?: string,\n};\n\nconst EditingTranscriptRow = ({ time, text = '', onSave, onCancel, onChange }: Props) => (\n    <div className=\"be-transcript-row be-transcript-editing-row\">\n        {time && <div className=\"be-transcript-time\">{time}</div>}\n        <div className=\"be-transcript-text\">\n            <TextareaAutosize maxRows={10} onChange={onChange} value={text} />\n            <div className=\"be-transcript-buttons\">\n                <Button data-resin-target={SKILLS_TARGETS.TRANSCRIPTS.EDIT_CANCEL} onClick={onCancel} type=\"button\">\n                    <FormattedMessage {...messages.cancel} />\n                </Button>\n                <PrimaryButton data-resin-target={SKILLS_TARGETS.TRANSCRIPTS.EDIT_SAVE} onClick={onSave} type=\"button\">\n                    <FormattedMessage {...messages.save} />\n                </PrimaryButton>\n            </div>\n        </div>\n    </div>\n);\n\nexport default EditingTranscriptRow;\n","// extracted by mini-css-extract-plugin","/**\n * @flow\n * @file Read only transcript row component\n * @author Box\n */\n\nimport * as React from 'react';\nimport PlainButton from '../../../../components/plain-button/PlainButton';\n\ntype Props = {\n    interactionTarget: string,\n    onClick: Function,\n    text?: string,\n    time?: string,\n};\n\nconst ReadOnlyTranscriptRow = ({ time, text = '', onClick, interactionTarget }: Props) => (\n    <PlainButton className=\"be-transcript-row\" data-resin-target={interactionTarget} onClick={onClick} type=\"button\">\n        {time && <div className=\"be-transcript-time\">{time}</div>}\n        <div className=\"be-transcript-text\">{text}</div>\n    </PlainButton>\n);\n\nexport default ReadOnlyTranscriptRow;\n","/**\n * @flow\n * @file Transcript component\n * @author Box\n */\n\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport classNames from 'classnames';\nimport { bdlGray50 } from '../../../../styles/variables';\nimport PlainButton from '../../../../components/plain-button/PlainButton';\nimport IconEdit from '../../../../icons/general/IconEdit';\nimport IconCopy from '../../../../icons/general/IconCopy';\nimport IconExpand from '../../../../icons/general/IconExpand';\nimport IconCollapse from '../../../../icons/general/IconCollapse';\nimport { formatTime } from '../../../../utils/datetime';\nimport LoadingIndicatorWrapper from '../../../../components/loading-indicator/LoadingIndicatorWrapper';\nimport Tooltip from '../../../../components/tooltip/Tooltip';\nimport { copy } from '../../../../utils/download';\nimport { SKILLS_TARGETS } from '../../../common/interactionTargets';\nimport messages from '../../../common/messages';\nimport { isValidTimeSlice } from './timeSliceUtils';\nimport TranscriptRow from './TranscriptRow';\nimport './Transcript.scss';\n\ntype Props = {\n    card: SkillCard,\n    getViewer?: Function,\n    isEditable: boolean,\n    onSkillChange: Function,\n};\n\ntype State = {\n    isCollapsed: boolean,\n    isEditingIndex?: number,\n    isLoading: boolean,\n    newTranscriptText: string,\n};\n\nclass Transcript extends React.PureComponent<Props, State> {\n    props: Props;\n\n    state: State = {\n        isEditingIndex: undefined,\n        newTranscriptText: '',\n        isCollapsed: true,\n        isLoading: false,\n    };\n\n    copyBtn: HTMLButtonElement;\n\n    /**\n     * Called when transcripts gets new properties\n     *\n     * @private\n     * @return {void}\n     */\n    componentDidUpdate(prevProps: Props): void {\n        if (prevProps === this.props) {\n            return;\n        }\n\n        const wasEditing = typeof this.state.isEditingIndex === 'number';\n        this.setState({\n            isEditingIndex: wasEditing ? -1 : undefined,\n            newTranscriptText: '',\n            isLoading: false,\n        });\n    }\n\n    /**\n     * Reducer to accumulate all transcript entries for copying\n     *\n     * @param {Object} accumulator - reducer accumulator\n     * @return {string} accumulated transcript entries\n     */\n    transcriptReducer = (accumulator: string, { appears, text }: SkillCardEntry): string => {\n        const start: string =\n            isValidTimeSlice(appears) && Array.isArray(appears) ? `${formatTime(appears[0].start)}:` : '';\n        return `${accumulator}${start} ${text || ''}\\r\\n`;\n    };\n\n    /**\n     * Mapper to accumulate all transcript entries for displaying\n     *\n     * @param {Object} accumulator - reducer accumulator\n     * @param {number} index - mapper index\n     * @return {string} accumulated transcript entries\n     */\n    transcriptMapper = ({ appears, text }: SkillCardEntry, index: number): React.Node => {\n        const { isEditingIndex, newTranscriptText }: State = this.state;\n        const isEditingRow = isEditingIndex === index;\n        const transcriptText = isEditingRow ? newTranscriptText : text;\n        const interactionTarget = isEditingRow\n            ? SKILLS_TARGETS.TRANSCRIPTS.EDIT_TEXT\n            : SKILLS_TARGETS.TRANSCRIPTS.TRANSCRIPT;\n        return (\n            <TranscriptRow\n                key={index}\n                appears={appears}\n                interactionTarget={interactionTarget}\n                isEditing={isEditingRow}\n                onCancel={this.onCancel}\n                onChange={this.onChange}\n                onClick={() => this.onClick(index)}\n                onSave={this.onSave}\n                text={transcriptText}\n            />\n        );\n    };\n\n    /**\n     * Toggles the edit mode\n     *\n     * @private\n     * @return {void}\n     */\n    toggleIsEditing = (): void => {\n        this.setState(prevState => ({\n            isEditingIndex: typeof prevState.isEditingIndex === 'number' ? undefined : -1,\n        }));\n    };\n\n    /**\n     * Previews a transcript segment\n     *\n     * @private\n     * @param {number|void} [index] - row index to edit\n     * @return {void}\n     */\n    previewSegment(index: number) {\n        const {\n            card: { entries },\n            getViewer,\n        }: Props = this.props;\n        const { appears } = entries[index];\n        const viewer = getViewer ? getViewer() : null;\n        const isValid = isValidTimeSlice(appears) && Array.isArray(appears) && appears.length === 1;\n        const timeSlice = ((appears: any): Array<SkillCardEntryTimeSlice>);\n        const start = isValid ? timeSlice[0].start : 0;\n\n        if (isValid && viewer && typeof viewer.play === 'function') {\n            viewer.play(start);\n        }\n    }\n\n    /**\n     * Saves the new card data\n     *\n     * @private\n     * @return {void}\n     */\n    onSave = (): void => {\n        const {\n            card: { entries },\n            onSkillChange,\n        }: Props = this.props;\n        const { isEditingIndex, newTranscriptText }: State = this.state;\n\n        if (typeof isEditingIndex !== 'number') {\n            return;\n        }\n\n        const entry = entries[isEditingIndex];\n        if (entry.text === newTranscriptText) {\n            this.onCancel();\n        } else {\n            this.setState({ isLoading: true, isEditingIndex: -1 });\n            onSkillChange(null, null, [\n                {\n                    replacement: { ...entry, text: newTranscriptText },\n                    replaced: entry,\n                },\n            ]);\n        }\n    };\n\n    /**\n     * Cancels editing\n     *\n     * @private\n     * @return {void}\n     */\n    onCancel = (): void => {\n        this.setState({ isEditingIndex: -1, newTranscriptText: '' });\n    };\n\n    /**\n     * Reflects changes of editing\n     *\n     * @private\n     * @param {Event} event - keyboard event\n     * @return {void}\n     */\n    onChange = (event: SyntheticKeyboardEvent<HTMLTextAreaElement>): void => {\n        const currentTarget = (event.currentTarget: HTMLTextAreaElement);\n        this.setState({\n            newTranscriptText: currentTarget.value,\n        });\n    };\n\n    /**\n     * Click handler for transcript\n     *\n     * @private\n     * @return {void}\n     */\n    onClick = (index: number): void => {\n        const {\n            card: { entries },\n        }: Props = this.props;\n        const { isEditingIndex }: State = this.state;\n        if (typeof isEditingIndex === 'number') {\n            this.setState({\n                isEditingIndex: index,\n                newTranscriptText: entries[index].text,\n            });\n        } else {\n            this.previewSegment(index);\n        }\n    };\n\n    /**\n     * Copies the transcript.\n     * Also animates the copy button.\n     *\n     * @private\n     * @return {void}\n     */\n    copyTranscript = () => {\n        const {\n            card: { entries },\n        }: Props = this.props;\n        const copiedClass = 'be-transcript-copied';\n        copy(entries.reduce(this.transcriptReducer, ''));\n\n        // Animate the button by adding a class\n        if (this.copyBtn) {\n            this.copyBtn.classList.add(copiedClass);\n        }\n\n        // Remove the animation class\n        setTimeout(() => {\n            if (this.copyBtn) {\n                this.copyBtn.classList.remove(copiedClass);\n            }\n        }, 1000);\n    };\n\n    /**\n     * Copy button reference\n     *\n     * @private\n     * @return {void}\n     */\n    copyBtnRef = (btn: HTMLButtonElement): void => {\n        this.copyBtn = btn;\n    };\n\n    /**\n     * Toggles transcript exapand and collapse\n     *\n     * @private\n     * @return {void}\n     */\n    toggleExpandCollapse = (): void => {\n        this.setState(prevState => ({\n            isCollapsed: !prevState.isCollapsed,\n        }));\n    };\n\n    /**\n     * Renders the transcript\n     *\n     * @private\n     * @return {Object}\n     */\n    render() {\n        const {\n            card: { entries },\n            isEditable,\n        }: Props = this.props;\n        const { isEditingIndex, isCollapsed, isLoading }: State = this.state;\n        const hasEntries = entries.length > 0;\n        const hasManyEntries = entries.length > 5;\n        const isEditing = typeof isEditingIndex === 'number';\n        const editBtnClassName = classNames('be-transcript-edit', {\n            'be-transcript-is-editing': isEditing,\n        });\n        const contentClassName = classNames({\n            'be-transcript-content-collapsed': isCollapsed,\n        });\n        const expandCollapseMessage = isCollapsed ? messages.expand : messages.collapse;\n\n        return (\n            <LoadingIndicatorWrapper className=\"be-transcript\" isLoading={isLoading}>\n                {hasEntries && !isLoading && (\n                    <div className=\"be-transcript-actions\">\n                        <Tooltip text={<FormattedMessage {...messages.copy} />}>\n                            <PlainButton\n                                className=\"be-transcript-copy\"\n                                data-resin-target={SKILLS_TARGETS.TRANSCRIPTS.COPY}\n                                getDOMRef={this.copyBtnRef}\n                                onClick={this.copyTranscript}\n                                type=\"button\"\n                            >\n                                <IconCopy color={bdlGray50} />\n                            </PlainButton>\n                        </Tooltip>\n                        {hasManyEntries && (\n                            <Tooltip text={<FormattedMessage {...expandCollapseMessage} />}>\n                                <PlainButton\n                                    className=\"be-transcript-expand\"\n                                    data-resin-target={SKILLS_TARGETS.TRANSCRIPTS.EXPAND}\n                                    onClick={this.toggleExpandCollapse}\n                                    type=\"button\"\n                                >\n                                    {isCollapsed ? (\n                                        <IconExpand color={bdlGray50} />\n                                    ) : (\n                                        <IconCollapse color={bdlGray50} />\n                                    )}\n                                </PlainButton>\n                            </Tooltip>\n                        )}\n                        {isEditable && (\n                            <Tooltip text={<FormattedMessage {...messages.editLabel} />}>\n                                <PlainButton\n                                    className={editBtnClassName}\n                                    data-resin-target={SKILLS_TARGETS.TRANSCRIPTS.EDIT}\n                                    onClick={this.toggleIsEditing}\n                                    type=\"button\"\n                                >\n                                    <IconEdit />\n                                </PlainButton>\n                            </Tooltip>\n                        )}\n                    </div>\n                )}\n                {isEditing ? (\n                    <div className=\"be-transcript-edit-message\">\n                        <FormattedMessage {...messages.transcriptEdit} />\n                    </div>\n                ) : null}\n                {hasEntries ? (\n                    <div className={contentClassName}>{entries.map(this.transcriptMapper)}</div>\n                ) : (\n                    <FormattedMessage {...messages.skillNoInfoFoundError} />\n                )}\n            </LoadingIndicatorWrapper>\n        );\n    }\n}\n\nexport default Transcript;\n","// extracted by mini-css-extract-plugin","/**\n * @flow\n * @file Transcript row component\n * @author Box\n */\n\nimport React from 'react';\nimport { formatTime } from '../../../../utils/datetime';\nimport ReadOnlyTranscriptRow from './ReadOnlyTranscriptRow';\nimport EditingTranscriptRow from './EditingTranscriptRow';\nimport { isValidTimeSlice } from './timeSliceUtils';\n\nimport './TranscriptRow.scss';\n\ntype Props = {\n    appears?: Array<SkillCardEntryTimeSlice>,\n    interactionTarget: string,\n    isEditing: boolean,\n    onCancel: Function,\n    onChange: Function,\n    onClick: Function,\n    onSave: Function,\n    text?: string,\n};\n\nconst TranscriptRow = ({ appears, text, isEditing, onClick, onSave, onCancel, onChange, interactionTarget }: Props) => {\n    const isValid = isValidTimeSlice(appears) && Array.isArray(appears) && appears.length === 1;\n    const timeSlice = ((appears: any): Array<SkillCardEntryTimeSlice>);\n    const start = isValid ? formatTime(timeSlice[0].start) : undefined;\n\n    return isEditing ? (\n        <EditingTranscriptRow onCancel={onCancel} onChange={onChange} onSave={onSave} text={text} time={start} />\n    ) : (\n        <ReadOnlyTranscriptRow interactionTarget={interactionTarget} onClick={onClick} text={text} time={start} />\n    );\n};\n\nexport default TranscriptRow;\n","// extracted by mini-css-extract-plugin","// @flow\nexport { default } from './Transcript';\n","/**\n * @flow\n * @file Transcript utils\n * @author Box\n */\n\n/**\n * Returns true if there is a valid start time\n *\n * @param {SkillCardEntryTimeSlice} timeslices - skill entry time slice\n * @return {boolean} if there is a valid start time\n */\nconst isValidStartTime = (timeslice: SkillCardEntryTimeSlice): boolean =>\n    !!timeslice && typeof timeslice.start === 'number';\n\n/**\n * Returns true if there is a valid time slice with valid start time\n *\n * @param {SkillCardEntryTimeSlice[]} timeslices - skill entry time slice\n * @return {boolean} if it is a valid time slice\n */\nconst isValidTimeSlice = (timeslices?: SkillCardEntryTimeSlice[]): boolean =>\n    Array.isArray(timeslices) && isValidStartTime(timeslices[0]);\n\nexport { isValidTimeSlice, isValidStartTime };\n","// @flow\nimport * as React from 'react';\n\nimport AccessibleSVG from '../accessible-svg';\n\ntype Props = {\n    className?: string,\n    color?: string,\n    height?: number,\n    /** A text-only string describing the icon if it's not purely decorative for accessibility */\n    title?: string | React.Element<any>,\n    width?: number,\n};\n\nconst IconCollapse = ({ className = '', color = '#979797', height = 13, title, width = 13 }: Props) => (\n    <AccessibleSVG\n        className={`icon-collapse ${className}`}\n        height={height}\n        title={title}\n        viewBox=\"0 0 13 13\"\n        width={width}\n    >\n        <path\n            className=\"fill-color\"\n            d=\"M8 6h4a1 1 0 0 0 0-2H9V1a1 1 0 0 0-2 0v4a1 1 0 0 0 1 1zM1 9h3v3a1 1 0 0 0 2 0V8a1 1 0 0 0-1-1H1a1 1 0 0 0 0 2z\"\n            fill={color}\n        />\n    </AccessibleSVG>\n);\n\nexport default IconCollapse;\n","// @flow\nimport * as React from 'react';\n\nimport AccessibleSVG from '../accessible-svg';\n\ntype Props = {\n    className?: string,\n    color?: string,\n    height?: number,\n    /** A text-only string describing the icon if it's not purely decorative for accessibility */\n    title?: string | React.Element<any>,\n    width?: number,\n};\n\nconst IconCopy = ({ className = '', color = '#999', height = 14, title, width = 14 }: Props) => (\n    <AccessibleSVG className={`icon-copy ${className}`} height={height} title={title} viewBox=\"0 0 14 14\" width={width}>\n        <path\n            className=\"fill-color\"\n            d=\"M1 11a1 1 0 0 1-1-1V1a1 1 0 0 1 1-1h9a1 1 0 0 1 0 2H2v8a1 1 0 0 1-1 1z\"\n            fill={color}\n        />\n        <path\n            className=\"fill-color\"\n            d=\"M13 3H3v10a1 1 0 0 0 1 1h9a1 1 0 0 0 1-1V4a1 1 0 0 0-1-1zm-3 8H7a1 1 0 0 1 0-2h3a1 1 0 0 1 0 2zm0-3H7a1 1 0 0 1 0-2h3a1 1 0 0 1 0 2z\"\n            fill={color}\n        />\n    </AccessibleSVG>\n);\n\nexport default IconCopy;\n","// @flow\nimport * as React from 'react';\n\nimport AccessibleSVG from '../accessible-svg';\n\ntype Props = {\n    className?: string,\n    color?: string,\n    height?: number,\n    /** A text-only string describing the icon if it's not purely decorative for accessibility */\n    title?: string | React.Element<any>,\n    width?: number,\n};\n\nconst IconEdit = ({ className = '', color = '#999', height = 14, title, width = 14 }: Props) => (\n    <AccessibleSVG className={`icon-edit ${className}`} height={height} title={title} viewBox=\"0 0 14 14\" width={width}>\n        <path\n            className=\"fill-color\"\n            d=\"M3.21 7.89l6.47-6.48a2 2 0 0 1 2.88 2.78h-.05L6 10.72 3.21 7.89zM2.24 9l2.83 2.83L1.67 13c-.52.18-.79-.1-.62-.61z\"\n            fill={color}\n        />\n    </AccessibleSVG>\n);\n\nexport default IconEdit;\n","// @flow\nimport * as React from 'react';\n\nimport AccessibleSVG from '../accessible-svg';\n\ntype Props = {\n    className?: string,\n    color?: string,\n    height?: number,\n    /** A text-only string describing the icon if it's not purely decorative for accessibility */\n    title?: string | React.Element<any>,\n    width?: number,\n};\n\nconst IconExpand = ({ className = '', color = '#979797', height = 13, title, width = 13 }: Props) => (\n    <AccessibleSVG\n        className={`icon-expand ${className}`}\n        height={height}\n        title={title}\n        viewBox=\"0 0 13 13\"\n        width={width}\n    >\n        <path\n            className=\"fill-color\"\n            d=\"M12 0H6a1 1 0 0 0 0 2h5v5a1 1 0 0 0 2 0V1a1 1 0 0 0-1-1zM7 11H2V6a1 1 0 0 0-2 0v6a1 1 0 0 0 1 1h6a1 1 0 0 0 0-2z\"\n            fill={color}\n        />\n    </AccessibleSVG>\n);\n\nexport default IconExpand;\n","// @flow\nimport * as React from 'react';\n\nimport AccessibleSVG from '../accessible-svg';\n\ntype Props = {\n    className?: string,\n    color?: string,\n    height?: number,\n    /** A text-only string describing the icon if it's not purely decorative for accessibility */\n    title?: string | React.Element<any>,\n    width?: number,\n};\n\nconst IconMinus = ({ className = '', color = '#000000', height = 16, title, width = 16 }: Props) => (\n    <AccessibleSVG\n        className={`icon-minus ${className}`}\n        height={height}\n        title={title}\n        viewBox=\"0 0 16 16\"\n        width={width}\n    >\n        <path d=\"M2 5h8v2H2z\" fill={color} fillRule=\"evenodd\" />\n    </AccessibleSVG>\n);\n\nexport default IconMinus;\n","// @flow\nimport * as React from 'react';\n\nimport AccessibleSVG from '../accessible-svg';\n\ntype Props = {\n    className?: string,\n    color?: string,\n    height?: number,\n    /** A text-only string describing the icon if it's not purely decorative for accessibility */\n    title?: string | React.Element<any>,\n    width?: number,\n};\n\nconst IconTrackNext = ({ className = '', color = '#999', height = 14, title, width = 14 }: Props) => (\n    <AccessibleSVG\n        className={`icon-track-next ${className}`}\n        height={height}\n        title={title}\n        viewBox=\"0 0 14 14\"\n        width={width}\n    >\n        <path\n            className=\"fill-color\"\n            d=\"M7.72 7.85a1 1 0 0 0 0-1.41l-5-4.81A1 1 0 0 0 2 1.35a1 1 0 0 0-1 1V12a1 1 0 0 0 .28.69 1 1 0 0 0 1.41 0l5-4.81zM13 2v10a1 1 0 0 1-1 1 1 1 0 0 1-1-1V2a1 1 0 0 1 1-1 1 1 0 0 1 1 1z\"\n            fill={color}\n        />\n    </AccessibleSVG>\n);\n\nexport default IconTrackNext;\n","// @flow\nimport * as React from 'react';\n\nimport AccessibleSVG from '../accessible-svg';\n\ntype Props = {\n    className?: string,\n    color?: string,\n    height?: number,\n    /** A text-only string describing the icon if it's not purely decorative for accessibility */\n    title?: string | React.Element<any>,\n    width?: number,\n};\n\nconst IconTrackPrevious = ({ className = '', color = '#999', height = 14, title, width = 14 }: Props) => (\n    <AccessibleSVG\n        className={`icon-track-previous ${className}`}\n        height={height}\n        title={title}\n        viewBox=\"0 0 14 14\"\n        width={width}\n    >\n        <path\n            className=\"fill-color\"\n            d=\"M6.31 7.88l5 4.81a1 1 0 0 0 1.41 0A1 1 0 0 0 13 12V2.35a1 1 0 0 0-1-1 1 1 0 0 0-.69.28l-5 4.81a1 1 0 0 0 0 1.41zM2 1a1 1 0 0 1 1 1v10a1 1 0 0 1-1 1 1 1 0 0 1-1-1V2a1 1 0 0 1 1-1z\"\n            fill={color}\n        />\n    </AccessibleSVG>\n);\n\nexport default IconTrackPrevious;\n","/**\n * @flow\n * @file Utility for copying and downloading\n * @author Box\n */\n\n/**\n * Function to download string as txt file\n *\n * @private\n * @param {String} string - string to download\n * @param {String} name - file name to use\n * @return {void}\n */\nfunction download(string: string, name: string) {\n    const blob = new Blob([string], { type: 'text/plain;charset=utf-8' });\n\n    // IE11\n    if (window.navigator.msSaveBlob) {\n        window.navigator.msSaveBlob(blob, name);\n        return;\n    }\n\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n\n    a.style.display = 'none';\n    a.href = url;\n    a.download = name;\n    if (document.body) {\n        document.body.appendChild(a);\n    }\n\n    a.click();\n\n    setTimeout(() => {\n        if (document.body) {\n            document.body.removeChild(a);\n        }\n\n        URL.revokeObjectURL(url);\n    }, 100);\n}\n\n/**\n * Function to copy string to the clipboard\n *\n * @private\n * @param {String} string - string to copy\n * @return {void}\n */\nfunction copy(string: string) {\n    const textarea = document.createElement('textarea');\n    const { body } = document;\n\n    textarea.value = string;\n    textarea.style.display = 'hidden';\n\n    if (body) {\n        body.appendChild(textarea);\n        textarea.select();\n        document.execCommand('copy');\n        body.removeChild(textarea);\n    }\n}\n\nexport { download, copy };\n"],"sourceRoot":""}